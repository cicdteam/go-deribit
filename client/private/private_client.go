// Code generated by go-swagger; DO NOT EDIT.

package private

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new private API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for private API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetPrivateBuy(params *GetPrivateBuyParams) (*GetPrivateBuyOK, error)

	GetPrivateCancelTransferByID(params *GetPrivateCancelTransferByIDParams) (*GetPrivateCancelTransferByIDOK, error)

	GetPrivateChangeSubaccountName(params *GetPrivateChangeSubaccountNameParams) (*GetPrivateChangeSubaccountNameOK, error)

	GetPrivateClosePosition(params *GetPrivateClosePositionParams) (*GetPrivateClosePositionOK, error)

	GetPrivateCreateSubaccount(params *GetPrivateCreateSubaccountParams) (*GetPrivateCreateSubaccountOK, error)

	GetPrivateDisableTfaForSubaccount(params *GetPrivateDisableTfaForSubaccountParams) (*GetPrivateDisableTfaForSubaccountOK, error)

	GetPrivateGetOrderState(params *GetPrivateGetOrderStateParams) (*GetPrivateGetOrderStateOK, error)

	GetPrivateGetPosition(params *GetPrivateGetPositionParams) (*GetPrivateGetPositionOK, error)

	GetPrivateGetPositions(params *GetPrivateGetPositionsParams) (*GetPrivateGetPositionsOK, error)

	GetPrivateGetSubaccounts(params *GetPrivateGetSubaccountsParams) (*GetPrivateGetSubaccountsOK, error)

	GetPrivateSell(params *GetPrivateSellParams) (*GetPrivateSellOK, error)

	GetPrivateSetEmailForSubaccount(params *GetPrivateSetEmailForSubaccountParams) (*GetPrivateSetEmailForSubaccountOK, error)

	GetPrivateSetPasswordForSubaccount(params *GetPrivateSetPasswordForSubaccountParams) (*GetPrivateSetPasswordForSubaccountOK, error)

	GetPrivateSubmitTransferToSubaccount(params *GetPrivateSubmitTransferToSubaccountParams) (*GetPrivateSubmitTransferToSubaccountOK, error)

	GetPrivateSubmitTransferToUser(params *GetPrivateSubmitTransferToUserParams) (*GetPrivateSubmitTransferToUserOK, error)

	GetPrivateSubscribe(params *GetPrivateSubscribeParams) (*GetPrivateSubscribeOK, error)

	GetPrivateToggleNotificationsFromSubaccount(params *GetPrivateToggleNotificationsFromSubaccountParams) (*GetPrivateToggleNotificationsFromSubaccountOK, error)

	GetPrivateToggleSubaccountLogin(params *GetPrivateToggleSubaccountLoginParams) (*GetPrivateToggleSubaccountLoginOK, error)

	GetPrivateUnsubscribe(params *GetPrivateUnsubscribeParams) (*GetPrivateUnsubscribeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetPrivateBuy places a buy order for an instrument
*/
func (a *Client) GetPrivateBuy(params *GetPrivateBuyParams) (*GetPrivateBuyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateBuyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateBuy",
		Method:             "GET",
		PathPattern:        "/private/buy",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateBuyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateBuyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateBuy: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateCancelTransferByID cancels transfer
*/
func (a *Client) GetPrivateCancelTransferByID(params *GetPrivateCancelTransferByIDParams) (*GetPrivateCancelTransferByIDOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateCancelTransferByIDParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateCancelTransferByID",
		Method:             "GET",
		PathPattern:        "/private/cancel_transfer_by_id",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateCancelTransferByIDReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateCancelTransferByIDOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateCancelTransferByID: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateChangeSubaccountName changes the user name for a subaccount
*/
func (a *Client) GetPrivateChangeSubaccountName(params *GetPrivateChangeSubaccountNameParams) (*GetPrivateChangeSubaccountNameOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateChangeSubaccountNameParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateChangeSubaccountName",
		Method:             "GET",
		PathPattern:        "/private/change_subaccount_name",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateChangeSubaccountNameReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateChangeSubaccountNameOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateChangeSubaccountName: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateClosePosition makes closing position reduce only order
*/
func (a *Client) GetPrivateClosePosition(params *GetPrivateClosePositionParams) (*GetPrivateClosePositionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateClosePositionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateClosePosition",
		Method:             "GET",
		PathPattern:        "/private/close_position",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateClosePositionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateClosePositionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateClosePosition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateCreateSubaccount creates a new subaccount
*/
func (a *Client) GetPrivateCreateSubaccount(params *GetPrivateCreateSubaccountParams) (*GetPrivateCreateSubaccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateCreateSubaccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateCreateSubaccount",
		Method:             "GET",
		PathPattern:        "/private/create_subaccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateCreateSubaccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateCreateSubaccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateCreateSubaccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateDisableTfaForSubaccount disables two factor authentication for a subaccount
*/
func (a *Client) GetPrivateDisableTfaForSubaccount(params *GetPrivateDisableTfaForSubaccountParams) (*GetPrivateDisableTfaForSubaccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateDisableTfaForSubaccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateDisableTfaForSubaccount",
		Method:             "GET",
		PathPattern:        "/private/disable_tfa_for_subaccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateDisableTfaForSubaccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateDisableTfaForSubaccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateDisableTfaForSubaccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetOrderState retrieves the current state of an order
*/
func (a *Client) GetPrivateGetOrderState(params *GetPrivateGetOrderStateParams) (*GetPrivateGetOrderStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetOrderStateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetOrderState",
		Method:             "GET",
		PathPattern:        "/private/get_order_state",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetOrderStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetOrderStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetOrderState: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetPosition retrieves user position
*/
func (a *Client) GetPrivateGetPosition(params *GetPrivateGetPositionParams) (*GetPrivateGetPositionOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetPositionParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetPosition",
		Method:             "GET",
		PathPattern:        "/private/get_position",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetPositionReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetPositionOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetPosition: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetPositions retrieves user positions
*/
func (a *Client) GetPrivateGetPositions(params *GetPrivateGetPositionsParams) (*GetPrivateGetPositionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetPositionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetPositions",
		Method:             "GET",
		PathPattern:        "/private/get_positions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetPositionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetPositionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetPositions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetSubaccounts gets information about subaccounts
*/
func (a *Client) GetPrivateGetSubaccounts(params *GetPrivateGetSubaccountsParams) (*GetPrivateGetSubaccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetSubaccountsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetSubaccounts",
		Method:             "GET",
		PathPattern:        "/private/get_subaccounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetSubaccountsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetSubaccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetSubaccounts: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateSell places a sell order for an instrument
*/
func (a *Client) GetPrivateSell(params *GetPrivateSellParams) (*GetPrivateSellOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateSellParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateSell",
		Method:             "GET",
		PathPattern:        "/private/sell",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateSellReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateSellOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateSell: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateSetEmailForSubaccount assigns an email address to a subaccount user will receive an email with confirmation link
*/
func (a *Client) GetPrivateSetEmailForSubaccount(params *GetPrivateSetEmailForSubaccountParams) (*GetPrivateSetEmailForSubaccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateSetEmailForSubaccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateSetEmailForSubaccount",
		Method:             "GET",
		PathPattern:        "/private/set_email_for_subaccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateSetEmailForSubaccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateSetEmailForSubaccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateSetEmailForSubaccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateSetPasswordForSubaccount sets the password for the subaccount
*/
func (a *Client) GetPrivateSetPasswordForSubaccount(params *GetPrivateSetPasswordForSubaccountParams) (*GetPrivateSetPasswordForSubaccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateSetPasswordForSubaccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateSetPasswordForSubaccount",
		Method:             "GET",
		PathPattern:        "/private/set_password_for_subaccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateSetPasswordForSubaccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateSetPasswordForSubaccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateSetPasswordForSubaccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateSubmitTransferToSubaccount transfers funds to a subaccount
*/
func (a *Client) GetPrivateSubmitTransferToSubaccount(params *GetPrivateSubmitTransferToSubaccountParams) (*GetPrivateSubmitTransferToSubaccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateSubmitTransferToSubaccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateSubmitTransferToSubaccount",
		Method:             "GET",
		PathPattern:        "/private/submit_transfer_to_subaccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateSubmitTransferToSubaccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateSubmitTransferToSubaccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateSubmitTransferToSubaccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateSubmitTransferToUser transfers funds to a another user
*/
func (a *Client) GetPrivateSubmitTransferToUser(params *GetPrivateSubmitTransferToUserParams) (*GetPrivateSubmitTransferToUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateSubmitTransferToUserParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateSubmitTransferToUser",
		Method:             "GET",
		PathPattern:        "/private/submit_transfer_to_user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateSubmitTransferToUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateSubmitTransferToUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateSubmitTransferToUser: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateSubscribe subscribes to one or more channels

  Subscribe to one or more channels.

The name of the channel determines what information will be provided, and
in what form.

*/
func (a *Client) GetPrivateSubscribe(params *GetPrivateSubscribeParams) (*GetPrivateSubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateSubscribeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateSubscribe",
		Method:             "GET",
		PathPattern:        "/private/subscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateSubscribeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateSubscribeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateSubscribe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateToggleNotificationsFromSubaccount enables or disable sending of notifications for the subaccount
*/
func (a *Client) GetPrivateToggleNotificationsFromSubaccount(params *GetPrivateToggleNotificationsFromSubaccountParams) (*GetPrivateToggleNotificationsFromSubaccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateToggleNotificationsFromSubaccountParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateToggleNotificationsFromSubaccount",
		Method:             "GET",
		PathPattern:        "/private/toggle_notifications_from_subaccount",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateToggleNotificationsFromSubaccountReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateToggleNotificationsFromSubaccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateToggleNotificationsFromSubaccount: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateToggleSubaccountLogin enables or disable login for a subaccount if login is disabled and a session for the subaccount exists this session will be terminated
*/
func (a *Client) GetPrivateToggleSubaccountLogin(params *GetPrivateToggleSubaccountLoginParams) (*GetPrivateToggleSubaccountLoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateToggleSubaccountLoginParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateToggleSubaccountLogin",
		Method:             "GET",
		PathPattern:        "/private/toggle_subaccount_login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateToggleSubaccountLoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateToggleSubaccountLoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateToggleSubaccountLogin: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateUnsubscribe unsubscribes from one or more channels
*/
func (a *Client) GetPrivateUnsubscribe(params *GetPrivateUnsubscribeParams) (*GetPrivateUnsubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateUnsubscribeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateUnsubscribe",
		Method:             "GET",
		PathPattern:        "/private/unsubscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateUnsubscribeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateUnsubscribeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateUnsubscribe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
