// Code generated by go-swagger; DO NOT EDIT.

package private

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPrivateGetSubaccountsParams creates a new GetPrivateGetSubaccountsParams object
// with the default values initialized.
func NewGetPrivateGetSubaccountsParams() *GetPrivateGetSubaccountsParams {
	var ()
	return &GetPrivateGetSubaccountsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPrivateGetSubaccountsParamsWithTimeout creates a new GetPrivateGetSubaccountsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPrivateGetSubaccountsParamsWithTimeout(timeout time.Duration) *GetPrivateGetSubaccountsParams {
	var ()
	return &GetPrivateGetSubaccountsParams{

		timeout: timeout,
	}
}

// NewGetPrivateGetSubaccountsParamsWithContext creates a new GetPrivateGetSubaccountsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPrivateGetSubaccountsParamsWithContext(ctx context.Context) *GetPrivateGetSubaccountsParams {
	var ()
	return &GetPrivateGetSubaccountsParams{

		Context: ctx,
	}
}

// NewGetPrivateGetSubaccountsParamsWithHTTPClient creates a new GetPrivateGetSubaccountsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPrivateGetSubaccountsParamsWithHTTPClient(client *http.Client) *GetPrivateGetSubaccountsParams {
	var ()
	return &GetPrivateGetSubaccountsParams{
		HTTPClient: client,
	}
}

/*GetPrivateGetSubaccountsParams contains all the parameters to send to the API endpoint
for the get private get subaccounts operation typically these are written to a http.Request
*/
type GetPrivateGetSubaccountsParams struct {

	/*WithPortfolio*/
	WithPortfolio *bool

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get private get subaccounts params
func (o *GetPrivateGetSubaccountsParams) WithTimeout(timeout time.Duration) *GetPrivateGetSubaccountsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get private get subaccounts params
func (o *GetPrivateGetSubaccountsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get private get subaccounts params
func (o *GetPrivateGetSubaccountsParams) WithContext(ctx context.Context) *GetPrivateGetSubaccountsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get private get subaccounts params
func (o *GetPrivateGetSubaccountsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get private get subaccounts params
func (o *GetPrivateGetSubaccountsParams) WithHTTPClient(client *http.Client) *GetPrivateGetSubaccountsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get private get subaccounts params
func (o *GetPrivateGetSubaccountsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithWithPortfolio adds the withPortfolio to the get private get subaccounts params
func (o *GetPrivateGetSubaccountsParams) WithWithPortfolio(withPortfolio *bool) *GetPrivateGetSubaccountsParams {
	o.SetWithPortfolio(withPortfolio)
	return o
}

// SetWithPortfolio adds the withPortfolio to the get private get subaccounts params
func (o *GetPrivateGetSubaccountsParams) SetWithPortfolio(withPortfolio *bool) {
	o.WithPortfolio = withPortfolio
}

// WriteToRequest writes these params to a swagger request
func (o *GetPrivateGetSubaccountsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.WithPortfolio != nil {

		// query param with_portfolio
		var qrWithPortfolio bool
		if o.WithPortfolio != nil {
			qrWithPortfolio = *o.WithPortfolio
		}
		qWithPortfolio := swag.FormatBool(qrWithPortfolio)
		if qWithPortfolio != "" {
			if err := r.SetQueryParam("with_portfolio", qWithPortfolio); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
