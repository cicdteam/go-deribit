// Code generated by go-swagger; DO NOT EDIT.

package private

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPrivateUnsubscribeParams creates a new GetPrivateUnsubscribeParams object
// with the default values initialized.
func NewGetPrivateUnsubscribeParams() *GetPrivateUnsubscribeParams {
	var ()
	return &GetPrivateUnsubscribeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPrivateUnsubscribeParamsWithTimeout creates a new GetPrivateUnsubscribeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPrivateUnsubscribeParamsWithTimeout(timeout time.Duration) *GetPrivateUnsubscribeParams {
	var ()
	return &GetPrivateUnsubscribeParams{

		timeout: timeout,
	}
}

// NewGetPrivateUnsubscribeParamsWithContext creates a new GetPrivateUnsubscribeParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPrivateUnsubscribeParamsWithContext(ctx context.Context) *GetPrivateUnsubscribeParams {
	var ()
	return &GetPrivateUnsubscribeParams{

		Context: ctx,
	}
}

// NewGetPrivateUnsubscribeParamsWithHTTPClient creates a new GetPrivateUnsubscribeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPrivateUnsubscribeParamsWithHTTPClient(client *http.Client) *GetPrivateUnsubscribeParams {
	var ()
	return &GetPrivateUnsubscribeParams{
		HTTPClient: client,
	}
}

/*GetPrivateUnsubscribeParams contains all the parameters to send to the API endpoint
for the get private unsubscribe operation typically these are written to a http.Request
*/
type GetPrivateUnsubscribeParams struct {

	/*Channels
	  A list of channels to unsubscribe from.

	*/
	Channels []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get private unsubscribe params
func (o *GetPrivateUnsubscribeParams) WithTimeout(timeout time.Duration) *GetPrivateUnsubscribeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get private unsubscribe params
func (o *GetPrivateUnsubscribeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get private unsubscribe params
func (o *GetPrivateUnsubscribeParams) WithContext(ctx context.Context) *GetPrivateUnsubscribeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get private unsubscribe params
func (o *GetPrivateUnsubscribeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get private unsubscribe params
func (o *GetPrivateUnsubscribeParams) WithHTTPClient(client *http.Client) *GetPrivateUnsubscribeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get private unsubscribe params
func (o *GetPrivateUnsubscribeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithChannels adds the channels to the get private unsubscribe params
func (o *GetPrivateUnsubscribeParams) WithChannels(channels []string) *GetPrivateUnsubscribeParams {
	o.SetChannels(channels)
	return o
}

// SetChannels adds the channels to the get private unsubscribe params
func (o *GetPrivateUnsubscribeParams) SetChannels(channels []string) {
	o.Channels = channels
}

// WriteToRequest writes these params to a swagger request
func (o *GetPrivateUnsubscribeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	valuesChannels := o.Channels

	joinedChannels := swag.JoinByFormat(valuesChannels, "multi")
	// query array param channels
	if err := r.SetQueryParam("channels", joinedChannels...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
