// Code generated by go-swagger; DO NOT EDIT.

package market_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPublicGetLastTradesByCurrencyAndTimeParams creates a new GetPublicGetLastTradesByCurrencyAndTimeParams object
// with the default values initialized.
func NewGetPublicGetLastTradesByCurrencyAndTimeParams() *GetPublicGetLastTradesByCurrencyAndTimeParams {
	var ()
	return &GetPublicGetLastTradesByCurrencyAndTimeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPublicGetLastTradesByCurrencyAndTimeParamsWithTimeout creates a new GetPublicGetLastTradesByCurrencyAndTimeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPublicGetLastTradesByCurrencyAndTimeParamsWithTimeout(timeout time.Duration) *GetPublicGetLastTradesByCurrencyAndTimeParams {
	var ()
	return &GetPublicGetLastTradesByCurrencyAndTimeParams{

		timeout: timeout,
	}
}

// NewGetPublicGetLastTradesByCurrencyAndTimeParamsWithContext creates a new GetPublicGetLastTradesByCurrencyAndTimeParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPublicGetLastTradesByCurrencyAndTimeParamsWithContext(ctx context.Context) *GetPublicGetLastTradesByCurrencyAndTimeParams {
	var ()
	return &GetPublicGetLastTradesByCurrencyAndTimeParams{

		Context: ctx,
	}
}

// NewGetPublicGetLastTradesByCurrencyAndTimeParamsWithHTTPClient creates a new GetPublicGetLastTradesByCurrencyAndTimeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPublicGetLastTradesByCurrencyAndTimeParamsWithHTTPClient(client *http.Client) *GetPublicGetLastTradesByCurrencyAndTimeParams {
	var ()
	return &GetPublicGetLastTradesByCurrencyAndTimeParams{
		HTTPClient: client,
	}
}

/*GetPublicGetLastTradesByCurrencyAndTimeParams contains all the parameters to send to the API endpoint
for the get public get last trades by currency and time operation typically these are written to a http.Request
*/
type GetPublicGetLastTradesByCurrencyAndTimeParams struct {

	/*Count
	  Number of requested items, default - `10`

	*/
	Count *int64
	/*Currency
	  The currency symbol

	*/
	Currency string
	/*EndTimestamp
	  The most recent timestamp to return result for

	*/
	EndTimestamp int64
	/*IncludeOld
	  Include trades older than 7 days, default - `false`

	*/
	IncludeOld *bool
	/*Kind
	  Instrument kind, if not provided instruments of all kinds are considered

	*/
	Kind *string
	/*Sorting
	  Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)

	*/
	Sorting *string
	/*StartTimestamp
	  The earliest timestamp to return result for

	*/
	StartTimestamp int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) WithTimeout(timeout time.Duration) *GetPublicGetLastTradesByCurrencyAndTimeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) WithContext(ctx context.Context) *GetPublicGetLastTradesByCurrencyAndTimeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) WithHTTPClient(client *http.Client) *GetPublicGetLastTradesByCurrencyAndTimeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) WithCount(count *int64) *GetPublicGetLastTradesByCurrencyAndTimeParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) SetCount(count *int64) {
	o.Count = count
}

// WithCurrency adds the currency to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) WithCurrency(currency string) *GetPublicGetLastTradesByCurrencyAndTimeParams {
	o.SetCurrency(currency)
	return o
}

// SetCurrency adds the currency to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) SetCurrency(currency string) {
	o.Currency = currency
}

// WithEndTimestamp adds the endTimestamp to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) WithEndTimestamp(endTimestamp int64) *GetPublicGetLastTradesByCurrencyAndTimeParams {
	o.SetEndTimestamp(endTimestamp)
	return o
}

// SetEndTimestamp adds the endTimestamp to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) SetEndTimestamp(endTimestamp int64) {
	o.EndTimestamp = endTimestamp
}

// WithIncludeOld adds the includeOld to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) WithIncludeOld(includeOld *bool) *GetPublicGetLastTradesByCurrencyAndTimeParams {
	o.SetIncludeOld(includeOld)
	return o
}

// SetIncludeOld adds the includeOld to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) SetIncludeOld(includeOld *bool) {
	o.IncludeOld = includeOld
}

// WithKind adds the kind to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) WithKind(kind *string) *GetPublicGetLastTradesByCurrencyAndTimeParams {
	o.SetKind(kind)
	return o
}

// SetKind adds the kind to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) SetKind(kind *string) {
	o.Kind = kind
}

// WithSorting adds the sorting to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) WithSorting(sorting *string) *GetPublicGetLastTradesByCurrencyAndTimeParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WithStartTimestamp adds the startTimestamp to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) WithStartTimestamp(startTimestamp int64) *GetPublicGetLastTradesByCurrencyAndTimeParams {
	o.SetStartTimestamp(startTimestamp)
	return o
}

// SetStartTimestamp adds the startTimestamp to the get public get last trades by currency and time params
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) SetStartTimestamp(startTimestamp int64) {
	o.StartTimestamp = startTimestamp
}

// WriteToRequest writes these params to a swagger request
func (o *GetPublicGetLastTradesByCurrencyAndTimeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	// query param currency
	qrCurrency := o.Currency
	qCurrency := qrCurrency
	if qCurrency != "" {
		if err := r.SetQueryParam("currency", qCurrency); err != nil {
			return err
		}
	}

	// query param end_timestamp
	qrEndTimestamp := o.EndTimestamp
	qEndTimestamp := swag.FormatInt64(qrEndTimestamp)
	if qEndTimestamp != "" {
		if err := r.SetQueryParam("end_timestamp", qEndTimestamp); err != nil {
			return err
		}
	}

	if o.IncludeOld != nil {

		// query param include_old
		var qrIncludeOld bool
		if o.IncludeOld != nil {
			qrIncludeOld = *o.IncludeOld
		}
		qIncludeOld := swag.FormatBool(qrIncludeOld)
		if qIncludeOld != "" {
			if err := r.SetQueryParam("include_old", qIncludeOld); err != nil {
				return err
			}
		}

	}

	if o.Kind != nil {

		// query param kind
		var qrKind string
		if o.Kind != nil {
			qrKind = *o.Kind
		}
		qKind := qrKind
		if qKind != "" {
			if err := r.SetQueryParam("kind", qKind); err != nil {
				return err
			}
		}

	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	// query param start_timestamp
	qrStartTimestamp := o.StartTimestamp
	qStartTimestamp := swag.FormatInt64(qrStartTimestamp)
	if qStartTimestamp != "" {
		if err := r.SetQueryParam("start_timestamp", qStartTimestamp); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
