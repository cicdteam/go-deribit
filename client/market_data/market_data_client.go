// Code generated by go-swagger; DO NOT EDIT.

package market_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new market data API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for market data API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetPublicGetBookSummaryByCurrency(params *GetPublicGetBookSummaryByCurrencyParams) (*GetPublicGetBookSummaryByCurrencyOK, error)

	GetPublicGetBookSummaryByInstrument(params *GetPublicGetBookSummaryByInstrumentParams) (*GetPublicGetBookSummaryByInstrumentOK, error)

	GetPublicGetIndex(params *GetPublicGetIndexParams) (*GetPublicGetIndexOK, error)

	GetPublicGetLastSettlementsByCurrency(params *GetPublicGetLastSettlementsByCurrencyParams) (*GetPublicGetLastSettlementsByCurrencyOK, error)

	GetPublicGetLastSettlementsByInstrument(params *GetPublicGetLastSettlementsByInstrumentParams) (*GetPublicGetLastSettlementsByInstrumentOK, error)

	GetPublicGetLastTradesByCurrency(params *GetPublicGetLastTradesByCurrencyParams) (*GetPublicGetLastTradesByCurrencyOK, error)

	GetPublicGetLastTradesByCurrencyAndTime(params *GetPublicGetLastTradesByCurrencyAndTimeParams) (*GetPublicGetLastTradesByCurrencyAndTimeOK, error)

	GetPublicGetLastTradesByInstrument(params *GetPublicGetLastTradesByInstrumentParams) (*GetPublicGetLastTradesByInstrumentOK, error)

	GetPublicGetLastTradesByInstrumentAndTime(params *GetPublicGetLastTradesByInstrumentAndTimeParams) (*GetPublicGetLastTradesByInstrumentAndTimeOK, error)

	GetPublicGetOrderBook(params *GetPublicGetOrderBookParams) (*GetPublicGetOrderBookOK, error)

	GetPublicGetTradeVolumes(params *GetPublicGetTradeVolumesParams) (*GetPublicGetTradeVolumesOK, error)

	GetPublicGetlasttrades(params *GetPublicGetlasttradesParams) (*GetPublicGetlasttradesOK, error)

	GetPublicGetorderbook(params *GetPublicGetorderbookParams) (*GetPublicGetorderbookOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetPublicGetBookSummaryByCurrency retrieves the summary information such as open interest 24h volume etc for all instruments for the currency optionally filtered by kind
*/
func (a *Client) GetPublicGetBookSummaryByCurrency(params *GetPublicGetBookSummaryByCurrencyParams) (*GetPublicGetBookSummaryByCurrencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetBookSummaryByCurrencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetBookSummaryByCurrency",
		Method:             "GET",
		PathPattern:        "/public/get_book_summary_by_currency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetBookSummaryByCurrencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetBookSummaryByCurrencyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetBookSummaryByCurrency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicGetBookSummaryByInstrument retrieves the summary information such as open interest 24h volume etc for a specific instrument
*/
func (a *Client) GetPublicGetBookSummaryByInstrument(params *GetPublicGetBookSummaryByInstrumentParams) (*GetPublicGetBookSummaryByInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetBookSummaryByInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetBookSummaryByInstrument",
		Method:             "GET",
		PathPattern:        "/public/get_book_summary_by_instrument",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetBookSummaryByInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetBookSummaryByInstrumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetBookSummaryByInstrument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicGetIndex retrieves the current index price for the instruments for the selected currency
*/
func (a *Client) GetPublicGetIndex(params *GetPublicGetIndexParams) (*GetPublicGetIndexOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetIndexParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetIndex",
		Method:             "GET",
		PathPattern:        "/public/get_index",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetIndexReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetIndexOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetIndex: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicGetLastSettlementsByCurrency retrieves historical settlement delivery and bankruptcy events coming from all instruments within given currency
*/
func (a *Client) GetPublicGetLastSettlementsByCurrency(params *GetPublicGetLastSettlementsByCurrencyParams) (*GetPublicGetLastSettlementsByCurrencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetLastSettlementsByCurrencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetLastSettlementsByCurrency",
		Method:             "GET",
		PathPattern:        "/public/get_last_settlements_by_currency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetLastSettlementsByCurrencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetLastSettlementsByCurrencyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetLastSettlementsByCurrency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicGetLastSettlementsByInstrument retrieves historical public settlement delivery and bankruptcy events filtered by instrument name
*/
func (a *Client) GetPublicGetLastSettlementsByInstrument(params *GetPublicGetLastSettlementsByInstrumentParams) (*GetPublicGetLastSettlementsByInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetLastSettlementsByInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetLastSettlementsByInstrument",
		Method:             "GET",
		PathPattern:        "/public/get_last_settlements_by_instrument",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetLastSettlementsByInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetLastSettlementsByInstrumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetLastSettlementsByInstrument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicGetLastTradesByCurrency retrieves the latest trades that have occurred for instruments in a specific currency symbol
*/
func (a *Client) GetPublicGetLastTradesByCurrency(params *GetPublicGetLastTradesByCurrencyParams) (*GetPublicGetLastTradesByCurrencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetLastTradesByCurrencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetLastTradesByCurrency",
		Method:             "GET",
		PathPattern:        "/public/get_last_trades_by_currency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetLastTradesByCurrencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetLastTradesByCurrencyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetLastTradesByCurrency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicGetLastTradesByCurrencyAndTime retrieves the latest trades that have occurred for instruments in a specific currency symbol and within given time range
*/
func (a *Client) GetPublicGetLastTradesByCurrencyAndTime(params *GetPublicGetLastTradesByCurrencyAndTimeParams) (*GetPublicGetLastTradesByCurrencyAndTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetLastTradesByCurrencyAndTimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetLastTradesByCurrencyAndTime",
		Method:             "GET",
		PathPattern:        "/public/get_last_trades_by_currency_and_time",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetLastTradesByCurrencyAndTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetLastTradesByCurrencyAndTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetLastTradesByCurrencyAndTime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicGetLastTradesByInstrument retrieves the latest trades that have occurred for a specific instrument
*/
func (a *Client) GetPublicGetLastTradesByInstrument(params *GetPublicGetLastTradesByInstrumentParams) (*GetPublicGetLastTradesByInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetLastTradesByInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetLastTradesByInstrument",
		Method:             "GET",
		PathPattern:        "/public/get_last_trades_by_instrument",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetLastTradesByInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetLastTradesByInstrumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetLastTradesByInstrument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicGetLastTradesByInstrumentAndTime retrieves the latest trades that have occurred for a specific instrument and within given time range
*/
func (a *Client) GetPublicGetLastTradesByInstrumentAndTime(params *GetPublicGetLastTradesByInstrumentAndTimeParams) (*GetPublicGetLastTradesByInstrumentAndTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetLastTradesByInstrumentAndTimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetLastTradesByInstrumentAndTime",
		Method:             "GET",
		PathPattern:        "/public/get_last_trades_by_instrument_and_time",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetLastTradesByInstrumentAndTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetLastTradesByInstrumentAndTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetLastTradesByInstrumentAndTime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicGetOrderBook retrieves the order book along with other market values for a given instrument
*/
func (a *Client) GetPublicGetOrderBook(params *GetPublicGetOrderBookParams) (*GetPublicGetOrderBookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetOrderBookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetOrderBook",
		Method:             "GET",
		PathPattern:        "/public/get_order_book",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetOrderBookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetOrderBookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetOrderBook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicGetTradeVolumes retrieves aggregated 24h trade volumes for different instrument types and currencies
*/
func (a *Client) GetPublicGetTradeVolumes(params *GetPublicGetTradeVolumesParams) (*GetPublicGetTradeVolumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetTradeVolumesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetTradeVolumes",
		Method:             "GET",
		PathPattern:        "/public/get_trade_volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetTradeVolumesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetTradeVolumesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetTradeVolumes: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicGetlasttrades retrieves the latest trades that have occurred for a specific instrument trades are identified in two ways the trade is trade Id which is unique between all instruments but is not guaranteed to be strictly sequential the trade sequence trade seq which starts at 1 for each instruments and is strictly sequential under rare circumstances it is possible for the trade sequence to skip a few numbers
*/
func (a *Client) GetPublicGetlasttrades(params *GetPublicGetlasttradesParams) (*GetPublicGetlasttradesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetlasttradesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetlasttrades",
		Method:             "GET",
		PathPattern:        "/public/getlasttrades",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetlasttradesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetlasttradesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetlasttrades: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicGetorderbook retrieves the order book along with other market values for a given instrument
*/
func (a *Client) GetPublicGetorderbook(params *GetPublicGetorderbookParams) (*GetPublicGetorderbookOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetorderbookParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetorderbook",
		Method:             "GET",
		PathPattern:        "/public/getorderbook",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetorderbookReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetorderbookOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetorderbook: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
