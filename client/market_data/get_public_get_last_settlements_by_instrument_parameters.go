// Code generated by go-swagger; DO NOT EDIT.

package market_data

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPublicGetLastSettlementsByInstrumentParams creates a new GetPublicGetLastSettlementsByInstrumentParams object
// with the default values initialized.
func NewGetPublicGetLastSettlementsByInstrumentParams() *GetPublicGetLastSettlementsByInstrumentParams {
	var ()
	return &GetPublicGetLastSettlementsByInstrumentParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPublicGetLastSettlementsByInstrumentParamsWithTimeout creates a new GetPublicGetLastSettlementsByInstrumentParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPublicGetLastSettlementsByInstrumentParamsWithTimeout(timeout time.Duration) *GetPublicGetLastSettlementsByInstrumentParams {
	var ()
	return &GetPublicGetLastSettlementsByInstrumentParams{

		timeout: timeout,
	}
}

// NewGetPublicGetLastSettlementsByInstrumentParamsWithContext creates a new GetPublicGetLastSettlementsByInstrumentParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPublicGetLastSettlementsByInstrumentParamsWithContext(ctx context.Context) *GetPublicGetLastSettlementsByInstrumentParams {
	var ()
	return &GetPublicGetLastSettlementsByInstrumentParams{

		Context: ctx,
	}
}

// NewGetPublicGetLastSettlementsByInstrumentParamsWithHTTPClient creates a new GetPublicGetLastSettlementsByInstrumentParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPublicGetLastSettlementsByInstrumentParamsWithHTTPClient(client *http.Client) *GetPublicGetLastSettlementsByInstrumentParams {
	var ()
	return &GetPublicGetLastSettlementsByInstrumentParams{
		HTTPClient: client,
	}
}

/*GetPublicGetLastSettlementsByInstrumentParams contains all the parameters to send to the API endpoint
for the get public get last settlements by instrument operation typically these are written to a http.Request
*/
type GetPublicGetLastSettlementsByInstrumentParams struct {

	/*Continuation
	  Continuation token for pagination

	*/
	Continuation *string
	/*Count
	  Number of requested items, default - `20`

	*/
	Count *int64
	/*InstrumentName
	  Instrument name

	*/
	InstrumentName string
	/*SearchStartTimestamp
	  The latest timestamp to return result for

	*/
	SearchStartTimestamp *int64
	/*Type
	  Settlement type

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get public get last settlements by instrument params
func (o *GetPublicGetLastSettlementsByInstrumentParams) WithTimeout(timeout time.Duration) *GetPublicGetLastSettlementsByInstrumentParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get public get last settlements by instrument params
func (o *GetPublicGetLastSettlementsByInstrumentParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get public get last settlements by instrument params
func (o *GetPublicGetLastSettlementsByInstrumentParams) WithContext(ctx context.Context) *GetPublicGetLastSettlementsByInstrumentParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get public get last settlements by instrument params
func (o *GetPublicGetLastSettlementsByInstrumentParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get public get last settlements by instrument params
func (o *GetPublicGetLastSettlementsByInstrumentParams) WithHTTPClient(client *http.Client) *GetPublicGetLastSettlementsByInstrumentParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get public get last settlements by instrument params
func (o *GetPublicGetLastSettlementsByInstrumentParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithContinuation adds the continuation to the get public get last settlements by instrument params
func (o *GetPublicGetLastSettlementsByInstrumentParams) WithContinuation(continuation *string) *GetPublicGetLastSettlementsByInstrumentParams {
	o.SetContinuation(continuation)
	return o
}

// SetContinuation adds the continuation to the get public get last settlements by instrument params
func (o *GetPublicGetLastSettlementsByInstrumentParams) SetContinuation(continuation *string) {
	o.Continuation = continuation
}

// WithCount adds the count to the get public get last settlements by instrument params
func (o *GetPublicGetLastSettlementsByInstrumentParams) WithCount(count *int64) *GetPublicGetLastSettlementsByInstrumentParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get public get last settlements by instrument params
func (o *GetPublicGetLastSettlementsByInstrumentParams) SetCount(count *int64) {
	o.Count = count
}

// WithInstrumentName adds the instrumentName to the get public get last settlements by instrument params
func (o *GetPublicGetLastSettlementsByInstrumentParams) WithInstrumentName(instrumentName string) *GetPublicGetLastSettlementsByInstrumentParams {
	o.SetInstrumentName(instrumentName)
	return o
}

// SetInstrumentName adds the instrumentName to the get public get last settlements by instrument params
func (o *GetPublicGetLastSettlementsByInstrumentParams) SetInstrumentName(instrumentName string) {
	o.InstrumentName = instrumentName
}

// WithSearchStartTimestamp adds the searchStartTimestamp to the get public get last settlements by instrument params
func (o *GetPublicGetLastSettlementsByInstrumentParams) WithSearchStartTimestamp(searchStartTimestamp *int64) *GetPublicGetLastSettlementsByInstrumentParams {
	o.SetSearchStartTimestamp(searchStartTimestamp)
	return o
}

// SetSearchStartTimestamp adds the searchStartTimestamp to the get public get last settlements by instrument params
func (o *GetPublicGetLastSettlementsByInstrumentParams) SetSearchStartTimestamp(searchStartTimestamp *int64) {
	o.SearchStartTimestamp = searchStartTimestamp
}

// WithType adds the typeVar to the get public get last settlements by instrument params
func (o *GetPublicGetLastSettlementsByInstrumentParams) WithType(typeVar *string) *GetPublicGetLastSettlementsByInstrumentParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get public get last settlements by instrument params
func (o *GetPublicGetLastSettlementsByInstrumentParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetPublicGetLastSettlementsByInstrumentParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Continuation != nil {

		// query param continuation
		var qrContinuation string
		if o.Continuation != nil {
			qrContinuation = *o.Continuation
		}
		qContinuation := qrContinuation
		if qContinuation != "" {
			if err := r.SetQueryParam("continuation", qContinuation); err != nil {
				return err
			}
		}

	}

	if o.Count != nil {

		// query param count
		var qrCount int64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatInt64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	// query param instrument_name
	qrInstrumentName := o.InstrumentName
	qInstrumentName := qrInstrumentName
	if qInstrumentName != "" {
		if err := r.SetQueryParam("instrument_name", qInstrumentName); err != nil {
			return err
		}
	}

	if o.SearchStartTimestamp != nil {

		// query param search_start_timestamp
		var qrSearchStartTimestamp int64
		if o.SearchStartTimestamp != nil {
			qrSearchStartTimestamp = *o.SearchStartTimestamp
		}
		qSearchStartTimestamp := swag.FormatInt64(qrSearchStartTimestamp)
		if qSearchStartTimestamp != "" {
			if err := r.SetQueryParam("search_start_timestamp", qSearchStartTimestamp); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
