// Code generated by go-swagger; DO NOT EDIT.

package trading

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPrivateTradehistoryParams creates a new GetPrivateTradehistoryParams object
// with the default values initialized.
func NewGetPrivateTradehistoryParams() *GetPrivateTradehistoryParams {
	var ()
	return &GetPrivateTradehistoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPrivateTradehistoryParamsWithTimeout creates a new GetPrivateTradehistoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPrivateTradehistoryParamsWithTimeout(timeout time.Duration) *GetPrivateTradehistoryParams {
	var ()
	return &GetPrivateTradehistoryParams{

		timeout: timeout,
	}
}

// NewGetPrivateTradehistoryParamsWithContext creates a new GetPrivateTradehistoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPrivateTradehistoryParamsWithContext(ctx context.Context) *GetPrivateTradehistoryParams {
	var ()
	return &GetPrivateTradehistoryParams{

		Context: ctx,
	}
}

// NewGetPrivateTradehistoryParamsWithHTTPClient creates a new GetPrivateTradehistoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPrivateTradehistoryParamsWithHTTPClient(client *http.Client) *GetPrivateTradehistoryParams {
	var ()
	return &GetPrivateTradehistoryParams{
		HTTPClient: client,
	}
}

/*GetPrivateTradehistoryParams contains all the parameters to send to the API endpoint
for the get private tradehistory operation typically these are written to a http.Request
*/
type GetPrivateTradehistoryParams struct {

	/*Count
	  The number of trades returned (clamped to max 10000)

	*/
	Count *float64
	/*Direction
	  DEPRECATED, alias to "sort", for backward compatibility

	*/
	Direction *string
	/*EndID
	  The ID of the last trade to be returned

	*/
	EndID *float64
	/*EndSeq
	  The trade sequence of the last trade to be returned

	*/
	EndSeq *float64
	/*EndTimestamp
	  The timestamp (in ms) of the last trade to be returned

	*/
	EndTimestamp *int64
	/*Instrument
	  Either the name of the instrument, or `"all"` for instruments, `"futures"` for all futures, or `"options"` for all options.

	*/
	Instrument string
	/*Since
	  DEPRECATED, The ID after which trades are returned, for backward compatibility

	*/
	Since *float64
	/*Sort
	  `"asc"` for ascending, `"desc"` for descending

	*/
	Sort *string
	/*StartID
	  The ID of the first trade to be returned

	*/
	StartID *float64
	/*StartSeq
	  The trade sequence of the first trade to be returned

	*/
	StartSeq *float64
	/*StartTimestamp
	  The timestamp (in ms) of the first trade to be returned

	*/
	StartTimestamp *int64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) WithTimeout(timeout time.Duration) *GetPrivateTradehistoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) WithContext(ctx context.Context) *GetPrivateTradehistoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) WithHTTPClient(client *http.Client) *GetPrivateTradehistoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCount adds the count to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) WithCount(count *float64) *GetPrivateTradehistoryParams {
	o.SetCount(count)
	return o
}

// SetCount adds the count to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) SetCount(count *float64) {
	o.Count = count
}

// WithDirection adds the direction to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) WithDirection(direction *string) *GetPrivateTradehistoryParams {
	o.SetDirection(direction)
	return o
}

// SetDirection adds the direction to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) SetDirection(direction *string) {
	o.Direction = direction
}

// WithEndID adds the endID to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) WithEndID(endID *float64) *GetPrivateTradehistoryParams {
	o.SetEndID(endID)
	return o
}

// SetEndID adds the endId to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) SetEndID(endID *float64) {
	o.EndID = endID
}

// WithEndSeq adds the endSeq to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) WithEndSeq(endSeq *float64) *GetPrivateTradehistoryParams {
	o.SetEndSeq(endSeq)
	return o
}

// SetEndSeq adds the endSeq to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) SetEndSeq(endSeq *float64) {
	o.EndSeq = endSeq
}

// WithEndTimestamp adds the endTimestamp to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) WithEndTimestamp(endTimestamp *int64) *GetPrivateTradehistoryParams {
	o.SetEndTimestamp(endTimestamp)
	return o
}

// SetEndTimestamp adds the endTimestamp to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) SetEndTimestamp(endTimestamp *int64) {
	o.EndTimestamp = endTimestamp
}

// WithInstrument adds the instrument to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) WithInstrument(instrument string) *GetPrivateTradehistoryParams {
	o.SetInstrument(instrument)
	return o
}

// SetInstrument adds the instrument to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) SetInstrument(instrument string) {
	o.Instrument = instrument
}

// WithSince adds the since to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) WithSince(since *float64) *GetPrivateTradehistoryParams {
	o.SetSince(since)
	return o
}

// SetSince adds the since to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) SetSince(since *float64) {
	o.Since = since
}

// WithSort adds the sort to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) WithSort(sort *string) *GetPrivateTradehistoryParams {
	o.SetSort(sort)
	return o
}

// SetSort adds the sort to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) SetSort(sort *string) {
	o.Sort = sort
}

// WithStartID adds the startID to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) WithStartID(startID *float64) *GetPrivateTradehistoryParams {
	o.SetStartID(startID)
	return o
}

// SetStartID adds the startId to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) SetStartID(startID *float64) {
	o.StartID = startID
}

// WithStartSeq adds the startSeq to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) WithStartSeq(startSeq *float64) *GetPrivateTradehistoryParams {
	o.SetStartSeq(startSeq)
	return o
}

// SetStartSeq adds the startSeq to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) SetStartSeq(startSeq *float64) {
	o.StartSeq = startSeq
}

// WithStartTimestamp adds the startTimestamp to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) WithStartTimestamp(startTimestamp *int64) *GetPrivateTradehistoryParams {
	o.SetStartTimestamp(startTimestamp)
	return o
}

// SetStartTimestamp adds the startTimestamp to the get private tradehistory params
func (o *GetPrivateTradehistoryParams) SetStartTimestamp(startTimestamp *int64) {
	o.StartTimestamp = startTimestamp
}

// WriteToRequest writes these params to a swagger request
func (o *GetPrivateTradehistoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Count != nil {

		// query param count
		var qrCount float64
		if o.Count != nil {
			qrCount = *o.Count
		}
		qCount := swag.FormatFloat64(qrCount)
		if qCount != "" {
			if err := r.SetQueryParam("count", qCount); err != nil {
				return err
			}
		}

	}

	if o.Direction != nil {

		// query param direction
		var qrDirection string
		if o.Direction != nil {
			qrDirection = *o.Direction
		}
		qDirection := qrDirection
		if qDirection != "" {
			if err := r.SetQueryParam("direction", qDirection); err != nil {
				return err
			}
		}

	}

	if o.EndID != nil {

		// query param endId
		var qrEndID float64
		if o.EndID != nil {
			qrEndID = *o.EndID
		}
		qEndID := swag.FormatFloat64(qrEndID)
		if qEndID != "" {
			if err := r.SetQueryParam("endId", qEndID); err != nil {
				return err
			}
		}

	}

	if o.EndSeq != nil {

		// query param endSeq
		var qrEndSeq float64
		if o.EndSeq != nil {
			qrEndSeq = *o.EndSeq
		}
		qEndSeq := swag.FormatFloat64(qrEndSeq)
		if qEndSeq != "" {
			if err := r.SetQueryParam("endSeq", qEndSeq); err != nil {
				return err
			}
		}

	}

	if o.EndTimestamp != nil {

		// query param endTimestamp
		var qrEndTimestamp int64
		if o.EndTimestamp != nil {
			qrEndTimestamp = *o.EndTimestamp
		}
		qEndTimestamp := swag.FormatInt64(qrEndTimestamp)
		if qEndTimestamp != "" {
			if err := r.SetQueryParam("endTimestamp", qEndTimestamp); err != nil {
				return err
			}
		}

	}

	// query param instrument
	qrInstrument := o.Instrument
	qInstrument := qrInstrument
	if qInstrument != "" {
		if err := r.SetQueryParam("instrument", qInstrument); err != nil {
			return err
		}
	}

	if o.Since != nil {

		// query param since
		var qrSince float64
		if o.Since != nil {
			qrSince = *o.Since
		}
		qSince := swag.FormatFloat64(qrSince)
		if qSince != "" {
			if err := r.SetQueryParam("since", qSince); err != nil {
				return err
			}
		}

	}

	if o.Sort != nil {

		// query param sort
		var qrSort string
		if o.Sort != nil {
			qrSort = *o.Sort
		}
		qSort := qrSort
		if qSort != "" {
			if err := r.SetQueryParam("sort", qSort); err != nil {
				return err
			}
		}

	}

	if o.StartID != nil {

		// query param startId
		var qrStartID float64
		if o.StartID != nil {
			qrStartID = *o.StartID
		}
		qStartID := swag.FormatFloat64(qrStartID)
		if qStartID != "" {
			if err := r.SetQueryParam("startId", qStartID); err != nil {
				return err
			}
		}

	}

	if o.StartSeq != nil {

		// query param startSeq
		var qrStartSeq float64
		if o.StartSeq != nil {
			qrStartSeq = *o.StartSeq
		}
		qStartSeq := swag.FormatFloat64(qrStartSeq)
		if qStartSeq != "" {
			if err := r.SetQueryParam("startSeq", qStartSeq); err != nil {
				return err
			}
		}

	}

	if o.StartTimestamp != nil {

		// query param startTimestamp
		var qrStartTimestamp int64
		if o.StartTimestamp != nil {
			qrStartTimestamp = *o.StartTimestamp
		}
		qStartTimestamp := swag.FormatInt64(qrStartTimestamp)
		if qStartTimestamp != "" {
			if err := r.SetQueryParam("startTimestamp", qStartTimestamp); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
