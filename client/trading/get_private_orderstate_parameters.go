// Code generated by go-swagger; DO NOT EDIT.

package trading

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPrivateOrderstateParams creates a new GetPrivateOrderstateParams object
// with the default values initialized.
func NewGetPrivateOrderstateParams() *GetPrivateOrderstateParams {
	var ()
	return &GetPrivateOrderstateParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPrivateOrderstateParamsWithTimeout creates a new GetPrivateOrderstateParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPrivateOrderstateParamsWithTimeout(timeout time.Duration) *GetPrivateOrderstateParams {
	var ()
	return &GetPrivateOrderstateParams{

		timeout: timeout,
	}
}

// NewGetPrivateOrderstateParamsWithContext creates a new GetPrivateOrderstateParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPrivateOrderstateParamsWithContext(ctx context.Context) *GetPrivateOrderstateParams {
	var ()
	return &GetPrivateOrderstateParams{

		Context: ctx,
	}
}

// NewGetPrivateOrderstateParamsWithHTTPClient creates a new GetPrivateOrderstateParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPrivateOrderstateParamsWithHTTPClient(client *http.Client) *GetPrivateOrderstateParams {
	var ()
	return &GetPrivateOrderstateParams{
		HTTPClient: client,
	}
}

/*GetPrivateOrderstateParams contains all the parameters to send to the API endpoint
for the get private orderstate operation typically these are written to a http.Request
*/
type GetPrivateOrderstateParams struct {

	/*OrderID
	  Required, the ID of the order to be retrieved

	*/
	OrderID *float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get private orderstate params
func (o *GetPrivateOrderstateParams) WithTimeout(timeout time.Duration) *GetPrivateOrderstateParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get private orderstate params
func (o *GetPrivateOrderstateParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get private orderstate params
func (o *GetPrivateOrderstateParams) WithContext(ctx context.Context) *GetPrivateOrderstateParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get private orderstate params
func (o *GetPrivateOrderstateParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get private orderstate params
func (o *GetPrivateOrderstateParams) WithHTTPClient(client *http.Client) *GetPrivateOrderstateParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get private orderstate params
func (o *GetPrivateOrderstateParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrderID adds the orderID to the get private orderstate params
func (o *GetPrivateOrderstateParams) WithOrderID(orderID *float64) *GetPrivateOrderstateParams {
	o.SetOrderID(orderID)
	return o
}

// SetOrderID adds the orderId to the get private orderstate params
func (o *GetPrivateOrderstateParams) SetOrderID(orderID *float64) {
	o.OrderID = orderID
}

// WriteToRequest writes these params to a swagger request
func (o *GetPrivateOrderstateParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.OrderID != nil {

		// query param orderId
		var qrOrderID float64
		if o.OrderID != nil {
			qrOrderID = *o.OrderID
		}
		qOrderID := swag.FormatFloat64(qrOrderID)
		if qOrderID != "" {
			if err := r.SetQueryParam("orderId", qOrderID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
