// Code generated by go-swagger; DO NOT EDIT.

package trading

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new trading API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for trading API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetPrivateCancel(params *GetPrivateCancelParams) (*GetPrivateCancelOK, error)

	GetPrivateCancelAll(params *GetPrivateCancelAllParams) (*GetPrivateCancelAllOK, error)

	GetPrivateCancelAllByCurrency(params *GetPrivateCancelAllByCurrencyParams) (*GetPrivateCancelAllByCurrencyOK, error)

	GetPrivateCancelAllByInstrument(params *GetPrivateCancelAllByInstrumentParams) (*GetPrivateCancelAllByInstrumentOK, error)

	GetPrivateEdit(params *GetPrivateEditParams) (*GetPrivateEditOK, error)

	GetPrivateGetMargins(params *GetPrivateGetMarginsParams) (*GetPrivateGetMarginsOK, error)

	GetPrivateGetOpenOrdersByCurrency(params *GetPrivateGetOpenOrdersByCurrencyParams) (*GetPrivateGetOpenOrdersByCurrencyOK, error)

	GetPrivateGetOpenOrdersByInstrument(params *GetPrivateGetOpenOrdersByInstrumentParams) (*GetPrivateGetOpenOrdersByInstrumentOK, error)

	GetPrivateGetOrderHistoryByCurrency(params *GetPrivateGetOrderHistoryByCurrencyParams) (*GetPrivateGetOrderHistoryByCurrencyOK, error)

	GetPrivateGetOrderHistoryByInstrument(params *GetPrivateGetOrderHistoryByInstrumentParams) (*GetPrivateGetOrderHistoryByInstrumentOK, error)

	GetPrivateGetOrderMarginByIds(params *GetPrivateGetOrderMarginByIdsParams) (*GetPrivateGetOrderMarginByIdsOK, error)

	GetPrivateGetSettlementHistoryByCurrency(params *GetPrivateGetSettlementHistoryByCurrencyParams) (*GetPrivateGetSettlementHistoryByCurrencyOK, error)

	GetPrivateGetSettlementHistoryByInstrument(params *GetPrivateGetSettlementHistoryByInstrumentParams) (*GetPrivateGetSettlementHistoryByInstrumentOK, error)

	GetPrivateGetUserTradesByCurrency(params *GetPrivateGetUserTradesByCurrencyParams) (*GetPrivateGetUserTradesByCurrencyOK, error)

	GetPrivateGetUserTradesByCurrencyAndTime(params *GetPrivateGetUserTradesByCurrencyAndTimeParams) (*GetPrivateGetUserTradesByCurrencyAndTimeOK, error)

	GetPrivateGetUserTradesByInstrument(params *GetPrivateGetUserTradesByInstrumentParams) (*GetPrivateGetUserTradesByInstrumentOK, error)

	GetPrivateGetUserTradesByInstrumentAndTime(params *GetPrivateGetUserTradesByInstrumentAndTimeParams) (*GetPrivateGetUserTradesByInstrumentAndTimeOK, error)

	GetPrivateGetUserTradesByOrder(params *GetPrivateGetUserTradesByOrderParams) (*GetPrivateGetUserTradesByOrderOK, error)

	GetPrivateGetopenorders(params *GetPrivateGetopenordersParams) (*GetPrivateGetopenordersOK, error)

	GetPrivateOrderhistory(params *GetPrivateOrderhistoryParams) (*GetPrivateOrderhistoryOK, error)

	GetPrivateOrderstate(params *GetPrivateOrderstateParams) (*GetPrivateOrderstateOK, error)

	GetPrivatePositions(params *GetPrivatePositionsParams) (*GetPrivatePositionsOK, error)

	GetPrivateTradehistory(params *GetPrivateTradehistoryParams) (*GetPrivateTradehistoryOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetPrivateCancel cancels an order specified by order id
*/
func (a *Client) GetPrivateCancel(params *GetPrivateCancelParams) (*GetPrivateCancelOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateCancelParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateCancel",
		Method:             "GET",
		PathPattern:        "/private/cancel",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateCancelReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateCancelOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateCancel: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateCancelAll this method cancels all users orders and stop orders within all currencies and instrument kinds
*/
func (a *Client) GetPrivateCancelAll(params *GetPrivateCancelAllParams) (*GetPrivateCancelAllOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateCancelAllParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateCancelAll",
		Method:             "GET",
		PathPattern:        "/private/cancel_all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateCancelAllReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateCancelAllOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateCancelAll: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateCancelAllByCurrency cancels all orders by currency optionally filtered by instrument kind and or order type
*/
func (a *Client) GetPrivateCancelAllByCurrency(params *GetPrivateCancelAllByCurrencyParams) (*GetPrivateCancelAllByCurrencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateCancelAllByCurrencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateCancelAllByCurrency",
		Method:             "GET",
		PathPattern:        "/private/cancel_all_by_currency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateCancelAllByCurrencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateCancelAllByCurrencyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateCancelAllByCurrency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateCancelAllByInstrument cancels all orders by instrument optionally filtered by order type
*/
func (a *Client) GetPrivateCancelAllByInstrument(params *GetPrivateCancelAllByInstrumentParams) (*GetPrivateCancelAllByInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateCancelAllByInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateCancelAllByInstrument",
		Method:             "GET",
		PathPattern:        "/private/cancel_all_by_instrument",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateCancelAllByInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateCancelAllByInstrumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateCancelAllByInstrument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateEdit changes price amount and or other properties of an order
*/
func (a *Client) GetPrivateEdit(params *GetPrivateEditParams) (*GetPrivateEditOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateEditParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateEdit",
		Method:             "GET",
		PathPattern:        "/private/edit",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateEditReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateEditOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateEdit: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetMargins gets margins for given instrument amount and price
*/
func (a *Client) GetPrivateGetMargins(params *GetPrivateGetMarginsParams) (*GetPrivateGetMarginsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetMarginsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetMargins",
		Method:             "GET",
		PathPattern:        "/private/get_margins",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetMarginsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetMarginsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetMargins: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetOpenOrdersByCurrency retrieves list of user s open orders
*/
func (a *Client) GetPrivateGetOpenOrdersByCurrency(params *GetPrivateGetOpenOrdersByCurrencyParams) (*GetPrivateGetOpenOrdersByCurrencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetOpenOrdersByCurrencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetOpenOrdersByCurrency",
		Method:             "GET",
		PathPattern:        "/private/get_open_orders_by_currency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetOpenOrdersByCurrencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetOpenOrdersByCurrencyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetOpenOrdersByCurrency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetOpenOrdersByInstrument retrieves list of user s open orders within given instrument
*/
func (a *Client) GetPrivateGetOpenOrdersByInstrument(params *GetPrivateGetOpenOrdersByInstrumentParams) (*GetPrivateGetOpenOrdersByInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetOpenOrdersByInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetOpenOrdersByInstrument",
		Method:             "GET",
		PathPattern:        "/private/get_open_orders_by_instrument",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetOpenOrdersByInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetOpenOrdersByInstrumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetOpenOrdersByInstrument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetOrderHistoryByCurrency retrieves history of orders that have been partially or fully filled
*/
func (a *Client) GetPrivateGetOrderHistoryByCurrency(params *GetPrivateGetOrderHistoryByCurrencyParams) (*GetPrivateGetOrderHistoryByCurrencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetOrderHistoryByCurrencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetOrderHistoryByCurrency",
		Method:             "GET",
		PathPattern:        "/private/get_order_history_by_currency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetOrderHistoryByCurrencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetOrderHistoryByCurrencyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetOrderHistoryByCurrency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetOrderHistoryByInstrument retrieves history of orders that have been partially or fully filled
*/
func (a *Client) GetPrivateGetOrderHistoryByInstrument(params *GetPrivateGetOrderHistoryByInstrumentParams) (*GetPrivateGetOrderHistoryByInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetOrderHistoryByInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetOrderHistoryByInstrument",
		Method:             "GET",
		PathPattern:        "/private/get_order_history_by_instrument",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetOrderHistoryByInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetOrderHistoryByInstrumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetOrderHistoryByInstrument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetOrderMarginByIds retrieves initial margins of given orders
*/
func (a *Client) GetPrivateGetOrderMarginByIds(params *GetPrivateGetOrderMarginByIdsParams) (*GetPrivateGetOrderMarginByIdsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetOrderMarginByIdsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetOrderMarginByIds",
		Method:             "GET",
		PathPattern:        "/private/get_order_margin_by_ids",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetOrderMarginByIdsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetOrderMarginByIdsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetOrderMarginByIds: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetSettlementHistoryByCurrency retrieves settlement delivery and bankruptcy events that have affected your account
*/
func (a *Client) GetPrivateGetSettlementHistoryByCurrency(params *GetPrivateGetSettlementHistoryByCurrencyParams) (*GetPrivateGetSettlementHistoryByCurrencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetSettlementHistoryByCurrencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetSettlementHistoryByCurrency",
		Method:             "GET",
		PathPattern:        "/private/get_settlement_history_by_currency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetSettlementHistoryByCurrencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetSettlementHistoryByCurrencyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetSettlementHistoryByCurrency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetSettlementHistoryByInstrument retrieves public settlement delivery and bankruptcy events filtered by instrument name
*/
func (a *Client) GetPrivateGetSettlementHistoryByInstrument(params *GetPrivateGetSettlementHistoryByInstrumentParams) (*GetPrivateGetSettlementHistoryByInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetSettlementHistoryByInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetSettlementHistoryByInstrument",
		Method:             "GET",
		PathPattern:        "/private/get_settlement_history_by_instrument",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetSettlementHistoryByInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetSettlementHistoryByInstrumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetSettlementHistoryByInstrument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetUserTradesByCurrency retrieves the latest user trades that have occurred for instruments in a specific currency symbol
*/
func (a *Client) GetPrivateGetUserTradesByCurrency(params *GetPrivateGetUserTradesByCurrencyParams) (*GetPrivateGetUserTradesByCurrencyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetUserTradesByCurrencyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetUserTradesByCurrency",
		Method:             "GET",
		PathPattern:        "/private/get_user_trades_by_currency",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetUserTradesByCurrencyReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetUserTradesByCurrencyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetUserTradesByCurrency: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetUserTradesByCurrencyAndTime retrieves the latest user trades that have occurred for instruments in a specific currency symbol and within given time range
*/
func (a *Client) GetPrivateGetUserTradesByCurrencyAndTime(params *GetPrivateGetUserTradesByCurrencyAndTimeParams) (*GetPrivateGetUserTradesByCurrencyAndTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetUserTradesByCurrencyAndTimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetUserTradesByCurrencyAndTime",
		Method:             "GET",
		PathPattern:        "/private/get_user_trades_by_currency_and_time",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetUserTradesByCurrencyAndTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetUserTradesByCurrencyAndTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetUserTradesByCurrencyAndTime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetUserTradesByInstrument retrieves the latest user trades that have occurred for a specific instrument
*/
func (a *Client) GetPrivateGetUserTradesByInstrument(params *GetPrivateGetUserTradesByInstrumentParams) (*GetPrivateGetUserTradesByInstrumentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetUserTradesByInstrumentParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetUserTradesByInstrument",
		Method:             "GET",
		PathPattern:        "/private/get_user_trades_by_instrument",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetUserTradesByInstrumentReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetUserTradesByInstrumentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetUserTradesByInstrument: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetUserTradesByInstrumentAndTime retrieves the latest user trades that have occurred for a specific instrument and within given time range
*/
func (a *Client) GetPrivateGetUserTradesByInstrumentAndTime(params *GetPrivateGetUserTradesByInstrumentAndTimeParams) (*GetPrivateGetUserTradesByInstrumentAndTimeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetUserTradesByInstrumentAndTimeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetUserTradesByInstrumentAndTime",
		Method:             "GET",
		PathPattern:        "/private/get_user_trades_by_instrument_and_time",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetUserTradesByInstrumentAndTimeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetUserTradesByInstrumentAndTimeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetUserTradesByInstrumentAndTime: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetUserTradesByOrder retrieves the list of user trades that was created for given order
*/
func (a *Client) GetPrivateGetUserTradesByOrder(params *GetPrivateGetUserTradesByOrderParams) (*GetPrivateGetUserTradesByOrderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetUserTradesByOrderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetUserTradesByOrder",
		Method:             "GET",
		PathPattern:        "/private/get_user_trades_by_order",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetUserTradesByOrderReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetUserTradesByOrderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetUserTradesByOrder: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetopenorders retrieves open orders this API endpoint requires your request to be signed
*/
func (a *Client) GetPrivateGetopenorders(params *GetPrivateGetopenordersParams) (*GetPrivateGetopenordersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetopenordersParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetopenorders",
		Method:             "GET",
		PathPattern:        "/private/getopenorders",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetopenordersReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetopenordersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetopenorders: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateOrderhistory retrieves history of orders that have been partially or fully filled this API endpoint requires your request to be signed
*/
func (a *Client) GetPrivateOrderhistory(params *GetPrivateOrderhistoryParams) (*GetPrivateOrderhistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateOrderhistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateOrderhistory",
		Method:             "GET",
		PathPattern:        "/private/orderhistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateOrderhistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateOrderhistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateOrderhistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateOrderstate retrieves order details state by order id this API endpoint requires your request to be signed
*/
func (a *Client) GetPrivateOrderstate(params *GetPrivateOrderstateParams) (*GetPrivateOrderstateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateOrderstateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateOrderstate",
		Method:             "GET",
		PathPattern:        "/private/orderstate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateOrderstateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateOrderstateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateOrderstate: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivatePositions retrieves current positions this API endpoint requires your request to be signed
*/
func (a *Client) GetPrivatePositions(params *GetPrivatePositionsParams) (*GetPrivatePositionsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivatePositionsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivatePositions",
		Method:             "GET",
		PathPattern:        "/private/positions",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivatePositionsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivatePositionsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivatePositions: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateTradehistory retrieves the trade history of the account this API endpoint requires your request to be signed
*/
func (a *Client) GetPrivateTradehistory(params *GetPrivateTradehistoryParams) (*GetPrivateTradehistoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateTradehistoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateTradehistory",
		Method:             "GET",
		PathPattern:        "/private/tradehistory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateTradehistoryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateTradehistoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateTradehistory: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
