// Code generated by go-swagger; DO NOT EDIT.

package trading

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetPrivateGetUserTradesByOrderParams creates a new GetPrivateGetUserTradesByOrderParams object
// with the default values initialized.
func NewGetPrivateGetUserTradesByOrderParams() *GetPrivateGetUserTradesByOrderParams {
	var ()
	return &GetPrivateGetUserTradesByOrderParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPrivateGetUserTradesByOrderParamsWithTimeout creates a new GetPrivateGetUserTradesByOrderParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPrivateGetUserTradesByOrderParamsWithTimeout(timeout time.Duration) *GetPrivateGetUserTradesByOrderParams {
	var ()
	return &GetPrivateGetUserTradesByOrderParams{

		timeout: timeout,
	}
}

// NewGetPrivateGetUserTradesByOrderParamsWithContext creates a new GetPrivateGetUserTradesByOrderParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPrivateGetUserTradesByOrderParamsWithContext(ctx context.Context) *GetPrivateGetUserTradesByOrderParams {
	var ()
	return &GetPrivateGetUserTradesByOrderParams{

		Context: ctx,
	}
}

// NewGetPrivateGetUserTradesByOrderParamsWithHTTPClient creates a new GetPrivateGetUserTradesByOrderParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPrivateGetUserTradesByOrderParamsWithHTTPClient(client *http.Client) *GetPrivateGetUserTradesByOrderParams {
	var ()
	return &GetPrivateGetUserTradesByOrderParams{
		HTTPClient: client,
	}
}

/*GetPrivateGetUserTradesByOrderParams contains all the parameters to send to the API endpoint
for the get private get user trades by order operation typically these are written to a http.Request
*/
type GetPrivateGetUserTradesByOrderParams struct {

	/*OrderID
	  The order id

	*/
	OrderID string
	/*Sorting
	  Direction of results sorting (`default` value means no sorting, results will be returned in order in which they left the database)

	*/
	Sorting *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get private get user trades by order params
func (o *GetPrivateGetUserTradesByOrderParams) WithTimeout(timeout time.Duration) *GetPrivateGetUserTradesByOrderParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get private get user trades by order params
func (o *GetPrivateGetUserTradesByOrderParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get private get user trades by order params
func (o *GetPrivateGetUserTradesByOrderParams) WithContext(ctx context.Context) *GetPrivateGetUserTradesByOrderParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get private get user trades by order params
func (o *GetPrivateGetUserTradesByOrderParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get private get user trades by order params
func (o *GetPrivateGetUserTradesByOrderParams) WithHTTPClient(client *http.Client) *GetPrivateGetUserTradesByOrderParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get private get user trades by order params
func (o *GetPrivateGetUserTradesByOrderParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrderID adds the orderID to the get private get user trades by order params
func (o *GetPrivateGetUserTradesByOrderParams) WithOrderID(orderID string) *GetPrivateGetUserTradesByOrderParams {
	o.SetOrderID(orderID)
	return o
}

// SetOrderID adds the orderId to the get private get user trades by order params
func (o *GetPrivateGetUserTradesByOrderParams) SetOrderID(orderID string) {
	o.OrderID = orderID
}

// WithSorting adds the sorting to the get private get user trades by order params
func (o *GetPrivateGetUserTradesByOrderParams) WithSorting(sorting *string) *GetPrivateGetUserTradesByOrderParams {
	o.SetSorting(sorting)
	return o
}

// SetSorting adds the sorting to the get private get user trades by order params
func (o *GetPrivateGetUserTradesByOrderParams) SetSorting(sorting *string) {
	o.Sorting = sorting
}

// WriteToRequest writes these params to a swagger request
func (o *GetPrivateGetUserTradesByOrderParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param order_id
	qrOrderID := o.OrderID
	qOrderID := qrOrderID
	if qOrderID != "" {
		if err := r.SetQueryParam("order_id", qOrderID); err != nil {
			return err
		}
	}

	if o.Sorting != nil {

		// query param sorting
		var qrSorting string
		if o.Sorting != nil {
			qrSorting = *o.Sorting
		}
		qSorting := qrSorting
		if qSorting != "" {
			if err := r.SetQueryParam("sorting", qSorting); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
