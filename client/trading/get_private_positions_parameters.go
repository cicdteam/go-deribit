// Code generated by go-swagger; DO NOT EDIT.

package trading

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetPrivatePositionsParams creates a new GetPrivatePositionsParams object
// with the default values initialized.
func NewGetPrivatePositionsParams() *GetPrivatePositionsParams {
	var ()
	return &GetPrivatePositionsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPrivatePositionsParamsWithTimeout creates a new GetPrivatePositionsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPrivatePositionsParamsWithTimeout(timeout time.Duration) *GetPrivatePositionsParams {
	var ()
	return &GetPrivatePositionsParams{

		timeout: timeout,
	}
}

// NewGetPrivatePositionsParamsWithContext creates a new GetPrivatePositionsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPrivatePositionsParamsWithContext(ctx context.Context) *GetPrivatePositionsParams {
	var ()
	return &GetPrivatePositionsParams{

		Context: ctx,
	}
}

// NewGetPrivatePositionsParamsWithHTTPClient creates a new GetPrivatePositionsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPrivatePositionsParamsWithHTTPClient(client *http.Client) *GetPrivatePositionsParams {
	var ()
	return &GetPrivatePositionsParams{
		HTTPClient: client,
	}
}

/*GetPrivatePositionsParams contains all the parameters to send to the API endpoint
for the get private positions operation typically these are written to a http.Request
*/
type GetPrivatePositionsParams struct {

	/*Currency
	  Base currency to return positions for (`BTC`, `ETH` or all)

	*/
	Currency *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get private positions params
func (o *GetPrivatePositionsParams) WithTimeout(timeout time.Duration) *GetPrivatePositionsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get private positions params
func (o *GetPrivatePositionsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get private positions params
func (o *GetPrivatePositionsParams) WithContext(ctx context.Context) *GetPrivatePositionsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get private positions params
func (o *GetPrivatePositionsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get private positions params
func (o *GetPrivatePositionsParams) WithHTTPClient(client *http.Client) *GetPrivatePositionsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get private positions params
func (o *GetPrivatePositionsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCurrency adds the currency to the get private positions params
func (o *GetPrivatePositionsParams) WithCurrency(currency *string) *GetPrivatePositionsParams {
	o.SetCurrency(currency)
	return o
}

// SetCurrency adds the currency to the get private positions params
func (o *GetPrivatePositionsParams) SetCurrency(currency *string) {
	o.Currency = currency
}

// WriteToRequest writes these params to a swagger request
func (o *GetPrivatePositionsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Currency != nil {

		// query param currency
		var qrCurrency string
		if o.Currency != nil {
			qrCurrency = *o.Currency
		}
		qCurrency := qrCurrency
		if qCurrency != "" {
			if err := r.SetQueryParam("currency", qCurrency); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
