// Code generated by go-swagger; DO NOT EDIT.

package trading

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPrivateGetopenordersParams creates a new GetPrivateGetopenordersParams object
// with the default values initialized.
func NewGetPrivateGetopenordersParams() *GetPrivateGetopenordersParams {
	var ()
	return &GetPrivateGetopenordersParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPrivateGetopenordersParamsWithTimeout creates a new GetPrivateGetopenordersParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPrivateGetopenordersParamsWithTimeout(timeout time.Duration) *GetPrivateGetopenordersParams {
	var ()
	return &GetPrivateGetopenordersParams{

		timeout: timeout,
	}
}

// NewGetPrivateGetopenordersParamsWithContext creates a new GetPrivateGetopenordersParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPrivateGetopenordersParamsWithContext(ctx context.Context) *GetPrivateGetopenordersParams {
	var ()
	return &GetPrivateGetopenordersParams{

		Context: ctx,
	}
}

// NewGetPrivateGetopenordersParamsWithHTTPClient creates a new GetPrivateGetopenordersParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPrivateGetopenordersParamsWithHTTPClient(client *http.Client) *GetPrivateGetopenordersParams {
	var ()
	return &GetPrivateGetopenordersParams{
		HTTPClient: client,
	}
}

/*GetPrivateGetopenordersParams contains all the parameters to send to the API endpoint
for the get private getopenorders operation typically these are written to a http.Request
*/
type GetPrivateGetopenordersParams struct {

	/*Instrument
	  Instrument to return open orders for

	*/
	Instrument *string
	/*OrderID
	  order ID

	*/
	OrderID *float64
	/*Type
	  Order types to return. Valid values include `"limit"`, `"stop_limit"`

	*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get private getopenorders params
func (o *GetPrivateGetopenordersParams) WithTimeout(timeout time.Duration) *GetPrivateGetopenordersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get private getopenorders params
func (o *GetPrivateGetopenordersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get private getopenorders params
func (o *GetPrivateGetopenordersParams) WithContext(ctx context.Context) *GetPrivateGetopenordersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get private getopenorders params
func (o *GetPrivateGetopenordersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get private getopenorders params
func (o *GetPrivateGetopenordersParams) WithHTTPClient(client *http.Client) *GetPrivateGetopenordersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get private getopenorders params
func (o *GetPrivateGetopenordersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInstrument adds the instrument to the get private getopenorders params
func (o *GetPrivateGetopenordersParams) WithInstrument(instrument *string) *GetPrivateGetopenordersParams {
	o.SetInstrument(instrument)
	return o
}

// SetInstrument adds the instrument to the get private getopenorders params
func (o *GetPrivateGetopenordersParams) SetInstrument(instrument *string) {
	o.Instrument = instrument
}

// WithOrderID adds the orderID to the get private getopenorders params
func (o *GetPrivateGetopenordersParams) WithOrderID(orderID *float64) *GetPrivateGetopenordersParams {
	o.SetOrderID(orderID)
	return o
}

// SetOrderID adds the orderId to the get private getopenorders params
func (o *GetPrivateGetopenordersParams) SetOrderID(orderID *float64) {
	o.OrderID = orderID
}

// WithType adds the typeVar to the get private getopenorders params
func (o *GetPrivateGetopenordersParams) WithType(typeVar *string) *GetPrivateGetopenordersParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get private getopenorders params
func (o *GetPrivateGetopenordersParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetPrivateGetopenordersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Instrument != nil {

		// query param instrument
		var qrInstrument string
		if o.Instrument != nil {
			qrInstrument = *o.Instrument
		}
		qInstrument := qrInstrument
		if qInstrument != "" {
			if err := r.SetQueryParam("instrument", qInstrument); err != nil {
				return err
			}
		}

	}

	if o.OrderID != nil {

		// query param orderId
		var qrOrderID float64
		if o.OrderID != nil {
			qrOrderID = *o.OrderID
		}
		qOrderID := swag.FormatFloat64(qrOrderID)
		if qOrderID != "" {
			if err := r.SetQueryParam("orderId", qOrderID); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
