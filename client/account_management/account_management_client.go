// Code generated by go-swagger; DO NOT EDIT.

package account_management

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new account management API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for account management API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetPrivateGetAccountSummary(params *GetPrivateGetAccountSummaryParams) (*GetPrivateGetAccountSummaryOK, error)

	GetPrivateGetEmailLanguage(params *GetPrivateGetEmailLanguageParams) (*GetPrivateGetEmailLanguageOK, error)

	GetPrivateGetNewAnnouncements(params *GetPrivateGetNewAnnouncementsParams) (*GetPrivateGetNewAnnouncementsOK, error)

	GetPrivateSetAnnouncementAsRead(params *GetPrivateSetAnnouncementAsReadParams) (*GetPrivateSetAnnouncementAsReadOK, error)

	GetPrivateSetEmailLanguage(params *GetPrivateSetEmailLanguageParams) (*GetPrivateSetEmailLanguageOK, error)

	GetPublicGetAnnouncements(params *GetPublicGetAnnouncementsParams) (*GetPublicGetAnnouncementsOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetPrivateGetAccountSummary retrieves user account summary
*/
func (a *Client) GetPrivateGetAccountSummary(params *GetPrivateGetAccountSummaryParams) (*GetPrivateGetAccountSummaryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetAccountSummaryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetAccountSummary",
		Method:             "GET",
		PathPattern:        "/private/get_account_summary",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetAccountSummaryReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetAccountSummaryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetAccountSummary: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetEmailLanguage retrieves the language to be used for emails
*/
func (a *Client) GetPrivateGetEmailLanguage(params *GetPrivateGetEmailLanguageParams) (*GetPrivateGetEmailLanguageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetEmailLanguageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetEmailLanguage",
		Method:             "GET",
		PathPattern:        "/private/get_email_language",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetEmailLanguageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetEmailLanguageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetEmailLanguage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateGetNewAnnouncements retrieves announcements that have not been marked read by the user
*/
func (a *Client) GetPrivateGetNewAnnouncements(params *GetPrivateGetNewAnnouncementsParams) (*GetPrivateGetNewAnnouncementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateGetNewAnnouncementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateGetNewAnnouncements",
		Method:             "GET",
		PathPattern:        "/private/get_new_announcements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateGetNewAnnouncementsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateGetNewAnnouncementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateGetNewAnnouncements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateSetAnnouncementAsRead marks an announcement as read so it will not be shown in get new announcements
*/
func (a *Client) GetPrivateSetAnnouncementAsRead(params *GetPrivateSetAnnouncementAsReadParams) (*GetPrivateSetAnnouncementAsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateSetAnnouncementAsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateSetAnnouncementAsRead",
		Method:             "GET",
		PathPattern:        "/private/set_announcement_as_read",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateSetAnnouncementAsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateSetAnnouncementAsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateSetAnnouncementAsRead: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateSetEmailLanguage changes the language to be used for emails
*/
func (a *Client) GetPrivateSetEmailLanguage(params *GetPrivateSetEmailLanguageParams) (*GetPrivateSetEmailLanguageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateSetEmailLanguageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateSetEmailLanguage",
		Method:             "GET",
		PathPattern:        "/private/set_email_language",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateSetEmailLanguageReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateSetEmailLanguageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateSetEmailLanguage: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicGetAnnouncements retrieves announcements from the last 30 days
*/
func (a *Client) GetPublicGetAnnouncements(params *GetPublicGetAnnouncementsParams) (*GetPublicGetAnnouncementsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetAnnouncementsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetAnnouncements",
		Method:             "GET",
		PathPattern:        "/public/get_announcements",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetAnnouncementsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetAnnouncementsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetAnnouncements: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
