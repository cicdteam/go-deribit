// Code generated by go-swagger; DO NOT EDIT.

package public

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPublicSetHeartbeatParams creates a new GetPublicSetHeartbeatParams object
// with the default values initialized.
func NewGetPublicSetHeartbeatParams() *GetPublicSetHeartbeatParams {
	var ()
	return &GetPublicSetHeartbeatParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPublicSetHeartbeatParamsWithTimeout creates a new GetPublicSetHeartbeatParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPublicSetHeartbeatParamsWithTimeout(timeout time.Duration) *GetPublicSetHeartbeatParams {
	var ()
	return &GetPublicSetHeartbeatParams{

		timeout: timeout,
	}
}

// NewGetPublicSetHeartbeatParamsWithContext creates a new GetPublicSetHeartbeatParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPublicSetHeartbeatParamsWithContext(ctx context.Context) *GetPublicSetHeartbeatParams {
	var ()
	return &GetPublicSetHeartbeatParams{

		Context: ctx,
	}
}

// NewGetPublicSetHeartbeatParamsWithHTTPClient creates a new GetPublicSetHeartbeatParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPublicSetHeartbeatParamsWithHTTPClient(client *http.Client) *GetPublicSetHeartbeatParams {
	var ()
	return &GetPublicSetHeartbeatParams{
		HTTPClient: client,
	}
}

/*GetPublicSetHeartbeatParams contains all the parameters to send to the API endpoint
for the get public set heartbeat operation typically these are written to a http.Request
*/
type GetPublicSetHeartbeatParams struct {

	/*Interval
	  The heartbeat interval in seconds, but not less than 10

	*/
	Interval float64

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get public set heartbeat params
func (o *GetPublicSetHeartbeatParams) WithTimeout(timeout time.Duration) *GetPublicSetHeartbeatParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get public set heartbeat params
func (o *GetPublicSetHeartbeatParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get public set heartbeat params
func (o *GetPublicSetHeartbeatParams) WithContext(ctx context.Context) *GetPublicSetHeartbeatParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get public set heartbeat params
func (o *GetPublicSetHeartbeatParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get public set heartbeat params
func (o *GetPublicSetHeartbeatParams) WithHTTPClient(client *http.Client) *GetPublicSetHeartbeatParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get public set heartbeat params
func (o *GetPublicSetHeartbeatParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInterval adds the interval to the get public set heartbeat params
func (o *GetPublicSetHeartbeatParams) WithInterval(interval float64) *GetPublicSetHeartbeatParams {
	o.SetInterval(interval)
	return o
}

// SetInterval adds the interval to the get public set heartbeat params
func (o *GetPublicSetHeartbeatParams) SetInterval(interval float64) {
	o.Interval = interval
}

// WriteToRequest writes these params to a swagger request
func (o *GetPublicSetHeartbeatParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param interval
	qrInterval := o.Interval
	qInterval := swag.FormatFloat64(qrInterval)
	if qInterval != "" {
		if err := r.SetQueryParam("interval", qInterval); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
