// Code generated by go-swagger; DO NOT EDIT.

package public

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetPublicGetContractSizeParams creates a new GetPublicGetContractSizeParams object
// with the default values initialized.
func NewGetPublicGetContractSizeParams() *GetPublicGetContractSizeParams {
	var ()
	return &GetPublicGetContractSizeParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPublicGetContractSizeParamsWithTimeout creates a new GetPublicGetContractSizeParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPublicGetContractSizeParamsWithTimeout(timeout time.Duration) *GetPublicGetContractSizeParams {
	var ()
	return &GetPublicGetContractSizeParams{

		timeout: timeout,
	}
}

// NewGetPublicGetContractSizeParamsWithContext creates a new GetPublicGetContractSizeParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPublicGetContractSizeParamsWithContext(ctx context.Context) *GetPublicGetContractSizeParams {
	var ()
	return &GetPublicGetContractSizeParams{

		Context: ctx,
	}
}

// NewGetPublicGetContractSizeParamsWithHTTPClient creates a new GetPublicGetContractSizeParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPublicGetContractSizeParamsWithHTTPClient(client *http.Client) *GetPublicGetContractSizeParams {
	var ()
	return &GetPublicGetContractSizeParams{
		HTTPClient: client,
	}
}

/*GetPublicGetContractSizeParams contains all the parameters to send to the API endpoint
for the get public get contract size operation typically these are written to a http.Request
*/
type GetPublicGetContractSizeParams struct {

	/*InstrumentName
	  Instrument name

	*/
	InstrumentName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get public get contract size params
func (o *GetPublicGetContractSizeParams) WithTimeout(timeout time.Duration) *GetPublicGetContractSizeParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get public get contract size params
func (o *GetPublicGetContractSizeParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get public get contract size params
func (o *GetPublicGetContractSizeParams) WithContext(ctx context.Context) *GetPublicGetContractSizeParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get public get contract size params
func (o *GetPublicGetContractSizeParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get public get contract size params
func (o *GetPublicGetContractSizeParams) WithHTTPClient(client *http.Client) *GetPublicGetContractSizeParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get public get contract size params
func (o *GetPublicGetContractSizeParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInstrumentName adds the instrumentName to the get public get contract size params
func (o *GetPublicGetContractSizeParams) WithInstrumentName(instrumentName string) *GetPublicGetContractSizeParams {
	o.SetInstrumentName(instrumentName)
	return o
}

// SetInstrumentName adds the instrumentName to the get public get contract size params
func (o *GetPublicGetContractSizeParams) SetInstrumentName(instrumentName string) {
	o.InstrumentName = instrumentName
}

// WriteToRequest writes these params to a swagger request
func (o *GetPublicGetContractSizeParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param instrument_name
	qrInstrumentName := o.InstrumentName
	qInstrumentName := qrInstrumentName
	if qInstrumentName != "" {
		if err := r.SetQueryParam("instrument_name", qInstrumentName); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
