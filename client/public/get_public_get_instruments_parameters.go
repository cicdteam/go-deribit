// Code generated by go-swagger; DO NOT EDIT.

package public

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPublicGetInstrumentsParams creates a new GetPublicGetInstrumentsParams object
// with the default values initialized.
func NewGetPublicGetInstrumentsParams() *GetPublicGetInstrumentsParams {
	var (
		expiredDefault = bool(false)
	)
	return &GetPublicGetInstrumentsParams{
		Expired: &expiredDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPublicGetInstrumentsParamsWithTimeout creates a new GetPublicGetInstrumentsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPublicGetInstrumentsParamsWithTimeout(timeout time.Duration) *GetPublicGetInstrumentsParams {
	var (
		expiredDefault = bool(false)
	)
	return &GetPublicGetInstrumentsParams{
		Expired: &expiredDefault,

		timeout: timeout,
	}
}

// NewGetPublicGetInstrumentsParamsWithContext creates a new GetPublicGetInstrumentsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPublicGetInstrumentsParamsWithContext(ctx context.Context) *GetPublicGetInstrumentsParams {
	var (
		expiredDefault = bool(false)
	)
	return &GetPublicGetInstrumentsParams{
		Expired: &expiredDefault,

		Context: ctx,
	}
}

// NewGetPublicGetInstrumentsParamsWithHTTPClient creates a new GetPublicGetInstrumentsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPublicGetInstrumentsParamsWithHTTPClient(client *http.Client) *GetPublicGetInstrumentsParams {
	var (
		expiredDefault = bool(false)
	)
	return &GetPublicGetInstrumentsParams{
		Expired:    &expiredDefault,
		HTTPClient: client,
	}
}

/*GetPublicGetInstrumentsParams contains all the parameters to send to the API endpoint
for the get public get instruments operation typically these are written to a http.Request
*/
type GetPublicGetInstrumentsParams struct {

	/*Currency
	  The currency symbol

	*/
	Currency string
	/*Expired
	  Set to true to show expired instruments instead of active ones.

	*/
	Expired *bool
	/*Kind
	  Instrument kind, if not provided instruments of all kinds are considered

	*/
	Kind *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get public get instruments params
func (o *GetPublicGetInstrumentsParams) WithTimeout(timeout time.Duration) *GetPublicGetInstrumentsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get public get instruments params
func (o *GetPublicGetInstrumentsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get public get instruments params
func (o *GetPublicGetInstrumentsParams) WithContext(ctx context.Context) *GetPublicGetInstrumentsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get public get instruments params
func (o *GetPublicGetInstrumentsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get public get instruments params
func (o *GetPublicGetInstrumentsParams) WithHTTPClient(client *http.Client) *GetPublicGetInstrumentsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get public get instruments params
func (o *GetPublicGetInstrumentsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCurrency adds the currency to the get public get instruments params
func (o *GetPublicGetInstrumentsParams) WithCurrency(currency string) *GetPublicGetInstrumentsParams {
	o.SetCurrency(currency)
	return o
}

// SetCurrency adds the currency to the get public get instruments params
func (o *GetPublicGetInstrumentsParams) SetCurrency(currency string) {
	o.Currency = currency
}

// WithExpired adds the expired to the get public get instruments params
func (o *GetPublicGetInstrumentsParams) WithExpired(expired *bool) *GetPublicGetInstrumentsParams {
	o.SetExpired(expired)
	return o
}

// SetExpired adds the expired to the get public get instruments params
func (o *GetPublicGetInstrumentsParams) SetExpired(expired *bool) {
	o.Expired = expired
}

// WithKind adds the kind to the get public get instruments params
func (o *GetPublicGetInstrumentsParams) WithKind(kind *string) *GetPublicGetInstrumentsParams {
	o.SetKind(kind)
	return o
}

// SetKind adds the kind to the get public get instruments params
func (o *GetPublicGetInstrumentsParams) SetKind(kind *string) {
	o.Kind = kind
}

// WriteToRequest writes these params to a swagger request
func (o *GetPublicGetInstrumentsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param currency
	qrCurrency := o.Currency
	qCurrency := qrCurrency
	if qCurrency != "" {
		if err := r.SetQueryParam("currency", qCurrency); err != nil {
			return err
		}
	}

	if o.Expired != nil {

		// query param expired
		var qrExpired bool
		if o.Expired != nil {
			qrExpired = *o.Expired
		}
		qExpired := swag.FormatBool(qrExpired)
		if qExpired != "" {
			if err := r.SetQueryParam("expired", qExpired); err != nil {
				return err
			}
		}

	}

	if o.Kind != nil {

		// query param kind
		var qrKind string
		if o.Kind != nil {
			qrKind = *o.Kind
		}
		qKind := qrKind
		if qKind != "" {
			if err := r.SetQueryParam("kind", qKind); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
