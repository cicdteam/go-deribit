// Code generated by go-swagger; DO NOT EDIT.

package websocket_only

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new websocket only API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for websocket only API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetPrivateDisableCancelOnDisconnect(params *GetPrivateDisableCancelOnDisconnectParams) (*GetPrivateDisableCancelOnDisconnectOK, error)

	GetPrivateEnableCancelOnDisconnect(params *GetPrivateEnableCancelOnDisconnectParams) (*GetPrivateEnableCancelOnDisconnectOK, error)

	GetPrivateLogout(params *GetPrivateLogoutParams) (*GetPrivateLogoutOK, error)

	GetPublicDisableHeartbeat(params *GetPublicDisableHeartbeatParams) (*GetPublicDisableHeartbeatOK, error)

	GetPublicUnsubscribe(params *GetPublicUnsubscribeParams) (*GetPublicUnsubscribeOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetPrivateDisableCancelOnDisconnect disables cancel on disconnect for the connection this does not change the default account setting
*/
func (a *Client) GetPrivateDisableCancelOnDisconnect(params *GetPrivateDisableCancelOnDisconnectParams) (*GetPrivateDisableCancelOnDisconnectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateDisableCancelOnDisconnectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateDisableCancelOnDisconnect",
		Method:             "GET",
		PathPattern:        "/private/disable_cancel_on_disconnect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateDisableCancelOnDisconnectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateDisableCancelOnDisconnectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateDisableCancelOnDisconnect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateEnableCancelOnDisconnect enables cancel on disconnect for the connection this does not change the default account setting
*/
func (a *Client) GetPrivateEnableCancelOnDisconnect(params *GetPrivateEnableCancelOnDisconnectParams) (*GetPrivateEnableCancelOnDisconnectOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateEnableCancelOnDisconnectParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateEnableCancelOnDisconnect",
		Method:             "GET",
		PathPattern:        "/private/enable_cancel_on_disconnect",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateEnableCancelOnDisconnectReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateEnableCancelOnDisconnectOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateEnableCancelOnDisconnect: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPrivateLogout gracefullies close websocket connection when c o d cancel on disconnect is enabled orders are not cancelled
*/
func (a *Client) GetPrivateLogout(params *GetPrivateLogoutParams) (*GetPrivateLogoutOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPrivateLogoutParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPrivateLogout",
		Method:             "GET",
		PathPattern:        "/private/logout",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPrivateLogoutReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPrivateLogoutOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPrivateLogout: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicDisableHeartbeat stops sending heartbeat messages
*/
func (a *Client) GetPublicDisableHeartbeat(params *GetPublicDisableHeartbeatParams) (*GetPublicDisableHeartbeatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicDisableHeartbeatParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicDisableHeartbeat",
		Method:             "GET",
		PathPattern:        "/public/disable_heartbeat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicDisableHeartbeatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicDisableHeartbeatOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicDisableHeartbeat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicUnsubscribe unsubscribes from one or more channels
*/
func (a *Client) GetPublicUnsubscribe(params *GetPublicUnsubscribeParams) (*GetPublicUnsubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicUnsubscribeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicUnsubscribe",
		Method:             "GET",
		PathPattern:        "/public/unsubscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicUnsubscribeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicUnsubscribeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicUnsubscribe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
