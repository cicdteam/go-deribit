// Code generated by go-swagger; DO NOT EDIT.

package public

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
)

// New creates a new public API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

/*
Client for public API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetPublicAuth(params *GetPublicAuthParams) (*GetPublicAuthOK, error)

	GetPublicGetContractSize(params *GetPublicGetContractSizeParams) (*GetPublicGetContractSizeOK, error)

	GetPublicGetCurrencies(params *GetPublicGetCurrenciesParams) (*GetPublicGetCurrenciesOK, error)

	GetPublicGetFundingChartData(params *GetPublicGetFundingChartDataParams) (*GetPublicGetFundingChartDataOK, error)

	GetPublicGetHistoricalVolatility(params *GetPublicGetHistoricalVolatilityParams) (*GetPublicGetHistoricalVolatilityOK, error)

	GetPublicGetInstruments(params *GetPublicGetInstrumentsParams) (*GetPublicGetInstrumentsOK, error)

	GetPublicGetTradingviewChartData(params *GetPublicGetTradingviewChartDataParams) (*GetPublicGetTradingviewChartDataOK, error)

	GetPublicHello(params *GetPublicHelloParams) (*GetPublicHelloOK, error)

	GetPublicSetHeartbeat(params *GetPublicSetHeartbeatParams) (*GetPublicSetHeartbeatOK, error)

	GetPublicSubscribe(params *GetPublicSubscribeParams) (*GetPublicSubscribeOK, error)

	GetPublicTest(params *GetPublicTestParams) (*GetPublicTestOK, error)

	GetPublicTicker(params *GetPublicTickerParams) (*GetPublicTickerOK, error)

	GetPublicValidateField(params *GetPublicValidateFieldParams) (*GetPublicValidateFieldOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
  GetPublicAuth authenticates

  Retrieve an Oauth access token, to be used for authentication of 'private' requests.

Three methods of authentication are supported:

- <code>password</code> - using email and and password as when logging on to the website
- <code>client_credentials</code> - using the access key and access secret that can be found on the API page on the website
- <code>client_signature</code> - using the access key that can be found on the API page on the website and user generated signature. The signature is calculated using some fields provided in the request, using formula described here [Deribit signature credentials](#additional-authorization-method-deribit-signature-credentials)
- <code>refresh_token</code> - using a refresh token that was received from an earlier invocation

The response will contain an access token, expiration period (number of seconds that the token is valid) and a refresh token that can
be used to get a new set of tokens.

*/
func (a *Client) GetPublicAuth(params *GetPublicAuthParams) (*GetPublicAuthOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicAuthParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicAuth",
		Method:             "GET",
		PathPattern:        "/public/auth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicAuthReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicAuthOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicAuth: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicGetContractSize retrieves contract size of provided instrument
*/
func (a *Client) GetPublicGetContractSize(params *GetPublicGetContractSizeParams) (*GetPublicGetContractSizeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetContractSizeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetContractSize",
		Method:             "GET",
		PathPattern:        "/public/get_contract_size",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetContractSizeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetContractSizeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetContractSize: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicGetCurrencies retrieves all cryptocurrencies supported by the API
*/
func (a *Client) GetPublicGetCurrencies(params *GetPublicGetCurrenciesParams) (*GetPublicGetCurrenciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetCurrenciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetCurrencies",
		Method:             "GET",
		PathPattern:        "/public/get_currencies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetCurrenciesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetCurrenciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetCurrencies: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicGetFundingChartData retrieves the latest user trades that have occurred for p e r p e t u a l instruments in a specific currency symbol and within given time range
*/
func (a *Client) GetPublicGetFundingChartData(params *GetPublicGetFundingChartDataParams) (*GetPublicGetFundingChartDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetFundingChartDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetFundingChartData",
		Method:             "GET",
		PathPattern:        "/public/get_funding_chart_data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetFundingChartDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetFundingChartDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetFundingChartData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicGetHistoricalVolatility provides information about historical volatility for given cryptocurrency
*/
func (a *Client) GetPublicGetHistoricalVolatility(params *GetPublicGetHistoricalVolatilityParams) (*GetPublicGetHistoricalVolatilityOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetHistoricalVolatilityParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetHistoricalVolatility",
		Method:             "GET",
		PathPattern:        "/public/get_historical_volatility",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetHistoricalVolatilityReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetHistoricalVolatilityOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetHistoricalVolatility: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicGetInstruments retrieves available trading instruments this method can be used to see which instruments are available for trading or which instruments have existed historically
*/
func (a *Client) GetPublicGetInstruments(params *GetPublicGetInstrumentsParams) (*GetPublicGetInstrumentsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetInstrumentsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetInstruments",
		Method:             "GET",
		PathPattern:        "/public/get_instruments",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetInstrumentsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetInstrumentsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetInstruments: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicGetTradingviewChartData publiclies available market data used to generate a trading view candle chart
*/
func (a *Client) GetPublicGetTradingviewChartData(params *GetPublicGetTradingviewChartDataParams) (*GetPublicGetTradingviewChartDataOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicGetTradingviewChartDataParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicGetTradingviewChartData",
		Method:             "GET",
		PathPattern:        "/public/get_tradingview_chart_data",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicGetTradingviewChartDataReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicGetTradingviewChartDataOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicGetTradingviewChartData: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicHello methods used to introduce the client software connected to deribit platform over websocket provided data may have an impact on the maintained connection and will be collected for internal statistical purposes in response deribit will also introduce itself
*/
func (a *Client) GetPublicHello(params *GetPublicHelloParams) (*GetPublicHelloOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicHelloParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicHello",
		Method:             "GET",
		PathPattern:        "/public/hello",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicHelloReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicHelloOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicHello: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicSetHeartbeat signals the websocket connection to send and request heartbeats heartbeats can be used to detect stale connections when heartbeats have been set up the API server will send heartbeat messages and test request messages your software should respond to test request messages by sending a api v2 public test request if your software fails to do so the API server will immediately close the connection if your account is configured to cancel on disconnect any orders opened over the connection will be cancelled
*/
func (a *Client) GetPublicSetHeartbeat(params *GetPublicSetHeartbeatParams) (*GetPublicSetHeartbeatOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicSetHeartbeatParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicSetHeartbeat",
		Method:             "GET",
		PathPattern:        "/public/set_heartbeat",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicSetHeartbeatReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicSetHeartbeatOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicSetHeartbeat: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicSubscribe subscribes to one or more channels

  Subscribe to one or more channels.

This is the same method as [/private/subscribe](#private_subscribe), but it can only
be used for 'public' channels.

*/
func (a *Client) GetPublicSubscribe(params *GetPublicSubscribeParams) (*GetPublicSubscribeOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicSubscribeParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicSubscribe",
		Method:             "GET",
		PathPattern:        "/public/subscribe",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicSubscribeReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicSubscribeOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicSubscribe: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicTest tests the connection to the API server and returns its version you can use this to make sure the API is reachable and matches the expected version
*/
func (a *Client) GetPublicTest(params *GetPublicTestParams) (*GetPublicTestOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicTestParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicTest",
		Method:             "GET",
		PathPattern:        "/public/test",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicTestReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicTestOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicTest: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicTicker gets ticker for an instrument
*/
func (a *Client) GetPublicTicker(params *GetPublicTickerParams) (*GetPublicTickerOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicTickerParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicTicker",
		Method:             "GET",
		PathPattern:        "/public/ticker",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicTickerReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicTickerOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicTicker: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
  GetPublicValidateField methods used to introduce the client software connected to deribit platform over websocket provided data may have an impact on the maintained connection and will be collected for internal statistical purposes in response deribit will also introduce itself
*/
func (a *Client) GetPublicValidateField(params *GetPublicValidateFieldParams) (*GetPublicValidateFieldOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetPublicValidateFieldParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "GetPublicValidateField",
		Method:             "GET",
		PathPattern:        "/public/validate_field",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &GetPublicValidateFieldReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetPublicValidateFieldOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for GetPublicValidateField: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
