// Code generated by go-swagger; DO NOT EDIT.

package trading

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// NewGetPrivateCancelByLabelParams creates a new GetPrivateCancelByLabelParams object
// with the default values initialized.
func NewGetPrivateCancelByLabelParams() *GetPrivateCancelByLabelParams {
	var ()
	return &GetPrivateCancelByLabelParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPrivateCancelByLabelParamsWithTimeout creates a new GetPrivateCancelByLabelParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPrivateCancelByLabelParamsWithTimeout(timeout time.Duration) *GetPrivateCancelByLabelParams {
	var ()
	return &GetPrivateCancelByLabelParams{

		timeout: timeout,
	}
}

// NewGetPrivateCancelByLabelParamsWithContext creates a new GetPrivateCancelByLabelParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPrivateCancelByLabelParamsWithContext(ctx context.Context) *GetPrivateCancelByLabelParams {
	var ()
	return &GetPrivateCancelByLabelParams{

		Context: ctx,
	}
}

// NewGetPrivateCancelByLabelParamsWithHTTPClient creates a new GetPrivateCancelByLabelParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPrivateCancelByLabelParamsWithHTTPClient(client *http.Client) *GetPrivateCancelByLabelParams {
	var ()
	return &GetPrivateCancelByLabelParams{
		HTTPClient: client,
	}
}

/*GetPrivateCancelByLabelParams contains all the parameters to send to the API endpoint
for the get private cancel by label operation typically these are written to a http.Request
*/
type GetPrivateCancelByLabelParams struct {

	/*Label
	  The order label

	*/
	Label string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get private cancel by label params
func (o *GetPrivateCancelByLabelParams) WithTimeout(timeout time.Duration) *GetPrivateCancelByLabelParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get private cancel by label params
func (o *GetPrivateCancelByLabelParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get private cancel by label params
func (o *GetPrivateCancelByLabelParams) WithContext(ctx context.Context) *GetPrivateCancelByLabelParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get private cancel by label params
func (o *GetPrivateCancelByLabelParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get private cancel by label params
func (o *GetPrivateCancelByLabelParams) WithHTTPClient(client *http.Client) *GetPrivateCancelByLabelParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get private cancel by label params
func (o *GetPrivateCancelByLabelParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithLabel adds the label to the get private cancel by label params
func (o *GetPrivateCancelByLabelParams) WithLabel(label string) *GetPrivateCancelByLabelParams {
	o.SetLabel(label)
	return o
}

// SetLabel adds the label to the get private cancel by label params
func (o *GetPrivateCancelByLabelParams) SetLabel(label string) {
	o.Label = label
}

// WriteToRequest writes these params to a swagger request
func (o *GetPrivateCancelByLabelParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param label
	qrLabel := o.Label
	qLabel := qrLabel
	if qLabel != "" {
		if err := r.SetQueryParam("label", qLabel); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
