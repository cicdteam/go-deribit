// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PrivateGetSubaccountsResponse private get subaccounts response
//
// swagger:model private_get_subaccounts_response
type PrivateGetSubaccountsResponse struct {
	BaseMessage

	// result
	// Required: true
	Result []*PrivateGetSubaccountsResponseResultItems0 `json:"result"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PrivateGetSubaccountsResponse) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseMessage
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseMessage = aO0

	// AO1
	var dataAO1 struct {
		Result []*PrivateGetSubaccountsResponseResultItems0 `json:"result"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Result = dataAO1.Result

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PrivateGetSubaccountsResponse) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseMessage)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Result []*PrivateGetSubaccountsResponseResultItems0 `json:"result"`
	}

	dataAO1.Result = m.Result

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this private get subaccounts response
func (m *PrivateGetSubaccountsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseMessage
	if err := m.BaseMessage.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateGetSubaccountsResponse) validateResult(formats strfmt.Registry) error {

	if err := validate.Required("result", "body", m.Result); err != nil {
		return err
	}

	for i := 0; i < len(m.Result); i++ {
		if swag.IsZero(m.Result[i]) { // not required
			continue
		}

		if m.Result[i] != nil {
			if err := m.Result[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("result" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateGetSubaccountsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateGetSubaccountsResponse) UnmarshalBinary(b []byte) error {
	var res PrivateGetSubaccountsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PrivateGetSubaccountsResponseResultItems0 private get subaccounts response result items0
//
// swagger:model PrivateGetSubaccountsResponseResultItems0
type PrivateGetSubaccountsResponseResultItems0 struct {

	// User email
	// Required: true
	Email *string `json:"email"`

	// Account/Subaccount identifier
	// Required: true
	ID *int64 `json:"id"`

	// `true` when password for the subaccount has been configured
	// Required: true
	IsPassword *bool `json:"is_password"`

	// Informs whether login to the subaccount is enabled
	LoginEnabled bool `json:"login_enabled,omitempty"`

	// New email address that has not yet been confirmed. This field is only included if `with_portfolio` == `true`.
	NotConfirmedEmail string `json:"not_confirmed_email,omitempty"`

	// Only if with_portfolio == true
	Portfolio *Portfolio `json:"portfolio,omitempty"`

	// When `true` - receive all notification emails on the main email
	// Required: true
	ReceiveNotifications *bool `json:"receive_notifications"`

	// System generated user nickname
	// Required: true
	SystemName *string `json:"system_name"`

	// Whether the two factor authentication is enabled
	// Required: true
	TfaEnabled *bool `json:"tfa_enabled"`

	// type
	// Required: true
	// Enum: [main subaccount]
	Type *string `json:"type"`

	// username
	// Required: true
	Username *string `json:"username"`
}

// Validate validates this private get subaccounts response result items0
func (m *PrivateGetSubaccountsResponseResultItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsPassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePortfolio(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReceiveNotifications(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSystemName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTfaEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateGetSubaccountsResponseResultItems0) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *PrivateGetSubaccountsResponseResultItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *PrivateGetSubaccountsResponseResultItems0) validateIsPassword(formats strfmt.Registry) error {

	if err := validate.Required("is_password", "body", m.IsPassword); err != nil {
		return err
	}

	return nil
}

func (m *PrivateGetSubaccountsResponseResultItems0) validatePortfolio(formats strfmt.Registry) error {

	if swag.IsZero(m.Portfolio) { // not required
		return nil
	}

	if m.Portfolio != nil {
		if err := m.Portfolio.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("portfolio")
			}
			return err
		}
	}

	return nil
}

func (m *PrivateGetSubaccountsResponseResultItems0) validateReceiveNotifications(formats strfmt.Registry) error {

	if err := validate.Required("receive_notifications", "body", m.ReceiveNotifications); err != nil {
		return err
	}

	return nil
}

func (m *PrivateGetSubaccountsResponseResultItems0) validateSystemName(formats strfmt.Registry) error {

	if err := validate.Required("system_name", "body", m.SystemName); err != nil {
		return err
	}

	return nil
}

func (m *PrivateGetSubaccountsResponseResultItems0) validateTfaEnabled(formats strfmt.Registry) error {

	if err := validate.Required("tfa_enabled", "body", m.TfaEnabled); err != nil {
		return err
	}

	return nil
}

var privateGetSubaccountsResponseResultItems0TypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["main","subaccount"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		privateGetSubaccountsResponseResultItems0TypeTypePropEnum = append(privateGetSubaccountsResponseResultItems0TypeTypePropEnum, v)
	}
}

const (

	// PrivateGetSubaccountsResponseResultItems0TypeMain captures enum value "main"
	PrivateGetSubaccountsResponseResultItems0TypeMain string = "main"

	// PrivateGetSubaccountsResponseResultItems0TypeSubaccount captures enum value "subaccount"
	PrivateGetSubaccountsResponseResultItems0TypeSubaccount string = "subaccount"
)

// prop value enum
func (m *PrivateGetSubaccountsResponseResultItems0) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, privateGetSubaccountsResponseResultItems0TypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PrivateGetSubaccountsResponseResultItems0) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *PrivateGetSubaccountsResponseResultItems0) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateGetSubaccountsResponseResultItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateGetSubaccountsResponseResultItems0) UnmarshalBinary(b []byte) error {
	var res PrivateGetSubaccountsResponseResultItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
