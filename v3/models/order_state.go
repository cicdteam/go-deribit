// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OrderState order state, `"open"`, `"filled"`, `"rejected"`, `"cancelled"`, `"untriggered"`
//
// swagger:model order_state
type OrderState string

const (

	// OrderStateOpen captures enum value "open"
	OrderStateOpen OrderState = "open"

	// OrderStateFilled captures enum value "filled"
	OrderStateFilled OrderState = "filled"

	// OrderStateRejected captures enum value "rejected"
	OrderStateRejected OrderState = "rejected"

	// OrderStateCancelled captures enum value "cancelled"
	OrderStateCancelled OrderState = "cancelled"

	// OrderStateUntriggered captures enum value "untriggered"
	OrderStateUntriggered OrderState = "untriggered"

	// OrderStateTriggered captures enum value "triggered"
	OrderStateTriggered OrderState = "triggered"
)

// for schema
var orderStateEnum []interface{}

func init() {
	var res []OrderState
	if err := json.Unmarshal([]byte(`["open","filled","rejected","cancelled","untriggered","triggered"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderStateEnum = append(orderStateEnum, v)
	}
}

func (m OrderState) validateOrderStateEnum(path, location string, value OrderState) error {
	if err := validate.EnumCase(path, location, value, orderStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this order state
func (m OrderState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrderStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
