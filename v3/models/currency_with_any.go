// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CurrencyWithAny Currency, i.e `"BTC"`, `"ETH"` or `"any"` if don't care
//
// swagger:model currency_with_any
type CurrencyWithAny string

const (

	// CurrencyWithAnyBTC captures enum value "BTC"
	CurrencyWithAnyBTC CurrencyWithAny = "BTC"

	// CurrencyWithAnyETH captures enum value "ETH"
	CurrencyWithAnyETH CurrencyWithAny = "ETH"

	// CurrencyWithAnyAny captures enum value "any"
	CurrencyWithAnyAny CurrencyWithAny = "any"
)

// for schema
var currencyWithAnyEnum []interface{}

func init() {
	var res []CurrencyWithAny
	if err := json.Unmarshal([]byte(`["BTC","ETH","any"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		currencyWithAnyEnum = append(currencyWithAnyEnum, v)
	}
}

func (m CurrencyWithAny) validateCurrencyWithAnyEnum(path, location string, value CurrencyWithAny) error {
	if err := validate.EnumCase(path, location, value, currencyWithAnyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this currency with any
func (m CurrencyWithAny) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCurrencyWithAnyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
