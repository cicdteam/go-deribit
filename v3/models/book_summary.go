// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BookSummary book summary
//
// swagger:model book_summary
type BookSummary struct {

	// The current best ask price, `null` if there aren't any asks
	// Required: true
	AskPrice *float64 `json:"ask_price"`

	// Base currency
	// Required: true
	BaseCurrency *string `json:"base_currency"`

	// The current best bid price, `null` if there aren't any bids
	// Required: true
	BidPrice *float64 `json:"bid_price"`

	// creation timestamp
	// Required: true
	CreationTimestamp Timestamp `json:"creation_timestamp"`

	// Current funding (perpetual only)
	CurrentFunding float64 `json:"current_funding,omitempty"`

	// Estimated delivery price, in USD. For more details, see Documentation > General > Expiration Price
	EstimatedDeliveryPrice float64 `json:"estimated_delivery_price,omitempty"`

	// Funding 8h (perpetual only)
	Funding8h float64 `json:"funding_8h,omitempty"`

	// Price of the 24h highest trade
	// Required: true
	High *float64 `json:"high"`

	// instrument name
	// Required: true
	InstrumentName InstrumentName `json:"instrument_name"`

	// Interest rate used in implied volatility calculations (options only)
	InterestRate float64 `json:"interest_rate,omitempty"`

	// The price of the latest trade, `null` if there weren't any trades
	// Required: true
	Last *float64 `json:"last"`

	// Price of the 24h lowest trade, `null` if there weren't any trades
	// Required: true
	Low *float64 `json:"low"`

	// The current instrument market price
	// Required: true
	MarkPrice *float64 `json:"mark_price"`

	// The average of the best bid and ask, `null` if there aren't any asks or bids
	// Required: true
	MidPrice *float64 `json:"mid_price"`

	// The total amount of outstanding contracts in the corresponding amount units. For perpetual and futures the amount is in USD units, for options it is amount of corresponding cryptocurrency contracts, e.g., BTC or ETH.
	// Required: true
	OpenInterest *float64 `json:"open_interest"`

	// Quote currency
	// Required: true
	QuoteCurrency *string `json:"quote_currency"`

	// Name of the underlying future, or `'index_price'` (options only)
	UnderlyingIndex string `json:"underlying_index,omitempty"`

	// underlying price for implied volatility calculations (options only)
	UnderlyingPrice float64 `json:"underlying_price,omitempty"`

	// The total 24h traded volume (in base currency)
	// Required: true
	Volume *float64 `json:"volume"`

	// Volume in usd (futures only)
	VolumeUsd float64 `json:"volume_usd,omitempty"`
}

// Validate validates this book summary
func (m *BookSummary) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAskPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBaseCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBidPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHigh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstrumentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLast(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMarkPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMidPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpenInterest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuoteCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BookSummary) validateAskPrice(formats strfmt.Registry) error {

	if err := validate.Required("ask_price", "body", m.AskPrice); err != nil {
		return err
	}

	return nil
}

func (m *BookSummary) validateBaseCurrency(formats strfmt.Registry) error {

	if err := validate.Required("base_currency", "body", m.BaseCurrency); err != nil {
		return err
	}

	return nil
}

func (m *BookSummary) validateBidPrice(formats strfmt.Registry) error {

	if err := validate.Required("bid_price", "body", m.BidPrice); err != nil {
		return err
	}

	return nil
}

func (m *BookSummary) validateCreationTimestamp(formats strfmt.Registry) error {

	if err := m.CreationTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("creation_timestamp")
		}
		return err
	}

	return nil
}

func (m *BookSummary) validateHigh(formats strfmt.Registry) error {

	if err := validate.Required("high", "body", m.High); err != nil {
		return err
	}

	return nil
}

func (m *BookSummary) validateInstrumentName(formats strfmt.Registry) error {

	if err := m.InstrumentName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("instrument_name")
		}
		return err
	}

	return nil
}

func (m *BookSummary) validateLast(formats strfmt.Registry) error {

	if err := validate.Required("last", "body", m.Last); err != nil {
		return err
	}

	return nil
}

func (m *BookSummary) validateLow(formats strfmt.Registry) error {

	if err := validate.Required("low", "body", m.Low); err != nil {
		return err
	}

	return nil
}

func (m *BookSummary) validateMarkPrice(formats strfmt.Registry) error {

	if err := validate.Required("mark_price", "body", m.MarkPrice); err != nil {
		return err
	}

	return nil
}

func (m *BookSummary) validateMidPrice(formats strfmt.Registry) error {

	if err := validate.Required("mid_price", "body", m.MidPrice); err != nil {
		return err
	}

	return nil
}

func (m *BookSummary) validateOpenInterest(formats strfmt.Registry) error {

	if err := validate.Required("open_interest", "body", m.OpenInterest); err != nil {
		return err
	}

	return nil
}

func (m *BookSummary) validateQuoteCurrency(formats strfmt.Registry) error {

	if err := validate.Required("quote_currency", "body", m.QuoteCurrency); err != nil {
		return err
	}

	return nil
}

func (m *BookSummary) validateVolume(formats strfmt.Registry) error {

	if err := validate.Required("volume", "body", m.Volume); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BookSummary) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BookSummary) UnmarshalBinary(b []byte) error {
	var res BookSummary
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
