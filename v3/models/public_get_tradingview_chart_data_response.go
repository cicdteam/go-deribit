// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublicGetTradingviewChartDataResponse public get tradingview chart data response
//
// swagger:model public_get_tradingview_chart_data_response
type PublicGetTradingviewChartDataResponse struct {
	BaseMessage

	// result
	// Required: true
	Result *PublicGetTradingviewChartDataResponseAO1Result `json:"result"`
}

// UnmarshalJSON unmarshals this object from a JSON structure
func (m *PublicGetTradingviewChartDataResponse) UnmarshalJSON(raw []byte) error {
	// AO0
	var aO0 BaseMessage
	if err := swag.ReadJSON(raw, &aO0); err != nil {
		return err
	}
	m.BaseMessage = aO0

	// AO1
	var dataAO1 struct {
		Result *PublicGetTradingviewChartDataResponseAO1Result `json:"result"`
	}
	if err := swag.ReadJSON(raw, &dataAO1); err != nil {
		return err
	}

	m.Result = dataAO1.Result

	return nil
}

// MarshalJSON marshals this object to a JSON structure
func (m PublicGetTradingviewChartDataResponse) MarshalJSON() ([]byte, error) {
	_parts := make([][]byte, 0, 2)

	aO0, err := swag.WriteJSON(m.BaseMessage)
	if err != nil {
		return nil, err
	}
	_parts = append(_parts, aO0)
	var dataAO1 struct {
		Result *PublicGetTradingviewChartDataResponseAO1Result `json:"result"`
	}

	dataAO1.Result = m.Result

	jsonDataAO1, errAO1 := swag.WriteJSON(dataAO1)
	if errAO1 != nil {
		return nil, errAO1
	}
	_parts = append(_parts, jsonDataAO1)
	return swag.ConcatJSON(_parts...), nil
}

// Validate validates this public get tradingview chart data response
func (m *PublicGetTradingviewChartDataResponse) Validate(formats strfmt.Registry) error {
	var res []error

	// validation for a type composition with BaseMessage
	if err := m.BaseMessage.Validate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicGetTradingviewChartDataResponse) validateResult(formats strfmt.Registry) error {

	if err := validate.Required("result", "body", m.Result); err != nil {
		return err
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublicGetTradingviewChartDataResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicGetTradingviewChartDataResponse) UnmarshalBinary(b []byte) error {
	var res PublicGetTradingviewChartDataResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PublicGetTradingviewChartDataResponseAO1Result public get tradingview chart data response a o1 result
//
// swagger:model PublicGetTradingviewChartDataResponseAO1Result
type PublicGetTradingviewChartDataResponseAO1Result struct {

	// List of prices at close (one per candle)
	Close []QuotePrice `json:"close"`

	// List of highest price levels (one per candle)
	High []QuotePrice `json:"high"`

	// List of lowest price levels (one per candle)
	Low []QuotePrice `json:"low"`

	// List of prices at open (one per candle)
	Open []QuotePrice `json:"open"`

	// Status of the query: `ok` or `no_data`
	// Enum: [ok no_data]
	Status string `json:"status,omitempty"`

	// Values of the time axis given in milliseconds since UNIX epoch
	Ticks []Timestamp `json:"ticks"`

	// List of volume bars (one per candle)
	Volume []ChartVolume `json:"volume"`
}

// Validate validates this public get tradingview chart data response a o1 result
func (m *PublicGetTradingviewChartDataResponseAO1Result) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClose(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHigh(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLow(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOpen(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTicks(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolume(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicGetTradingviewChartDataResponseAO1Result) validateClose(formats strfmt.Registry) error {

	if swag.IsZero(m.Close) { // not required
		return nil
	}

	for i := 0; i < len(m.Close); i++ {

		if err := m.Close[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result" + "." + "close" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PublicGetTradingviewChartDataResponseAO1Result) validateHigh(formats strfmt.Registry) error {

	if swag.IsZero(m.High) { // not required
		return nil
	}

	for i := 0; i < len(m.High); i++ {

		if err := m.High[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result" + "." + "high" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PublicGetTradingviewChartDataResponseAO1Result) validateLow(formats strfmt.Registry) error {

	if swag.IsZero(m.Low) { // not required
		return nil
	}

	for i := 0; i < len(m.Low); i++ {

		if err := m.Low[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result" + "." + "low" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PublicGetTradingviewChartDataResponseAO1Result) validateOpen(formats strfmt.Registry) error {

	if swag.IsZero(m.Open) { // not required
		return nil
	}

	for i := 0; i < len(m.Open); i++ {

		if err := m.Open[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result" + "." + "open" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

var publicGetTradingviewChartDataResponseAO1ResultTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ok","no_data"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicGetTradingviewChartDataResponseAO1ResultTypeStatusPropEnum = append(publicGetTradingviewChartDataResponseAO1ResultTypeStatusPropEnum, v)
	}
}

const (

	// PublicGetTradingviewChartDataResponseAO1ResultStatusOk captures enum value "ok"
	PublicGetTradingviewChartDataResponseAO1ResultStatusOk string = "ok"

	// PublicGetTradingviewChartDataResponseAO1ResultStatusNoData captures enum value "no_data"
	PublicGetTradingviewChartDataResponseAO1ResultStatusNoData string = "no_data"
)

// prop value enum
func (m *PublicGetTradingviewChartDataResponseAO1Result) validateStatusEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, publicGetTradingviewChartDataResponseAO1ResultTypeStatusPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PublicGetTradingviewChartDataResponseAO1Result) validateStatus(formats strfmt.Registry) error {

	if swag.IsZero(m.Status) { // not required
		return nil
	}

	// value enum
	if err := m.validateStatusEnum("result"+"."+"status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *PublicGetTradingviewChartDataResponseAO1Result) validateTicks(formats strfmt.Registry) error {

	if swag.IsZero(m.Ticks) { // not required
		return nil
	}

	for i := 0; i < len(m.Ticks); i++ {

		if err := m.Ticks[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result" + "." + "ticks" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

func (m *PublicGetTradingviewChartDataResponseAO1Result) validateVolume(formats strfmt.Registry) error {

	if swag.IsZero(m.Volume) { // not required
		return nil
	}

	for i := 0; i < len(m.Volume); i++ {

		if err := m.Volume[i].Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result" + "." + "volume" + "." + strconv.Itoa(i))
			}
			return err
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublicGetTradingviewChartDataResponseAO1Result) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicGetTradingviewChartDataResponseAO1Result) UnmarshalBinary(b []byte) error {
	var res PublicGetTradingviewChartDataResponseAO1Result
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
