// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// OrderStateInUserTrade order state, `"open"`, `"filled"`, `"rejected"`, `"cancelled"`, `"untriggered"` or `"archive"` (if order was archived)
//
// swagger:model order_state_in_user_trade
type OrderStateInUserTrade string

const (

	// OrderStateInUserTradeOpen captures enum value "open"
	OrderStateInUserTradeOpen OrderStateInUserTrade = "open"

	// OrderStateInUserTradeFilled captures enum value "filled"
	OrderStateInUserTradeFilled OrderStateInUserTrade = "filled"

	// OrderStateInUserTradeRejected captures enum value "rejected"
	OrderStateInUserTradeRejected OrderStateInUserTrade = "rejected"

	// OrderStateInUserTradeCancelled captures enum value "cancelled"
	OrderStateInUserTradeCancelled OrderStateInUserTrade = "cancelled"

	// OrderStateInUserTradeUntriggered captures enum value "untriggered"
	OrderStateInUserTradeUntriggered OrderStateInUserTrade = "untriggered"

	// OrderStateInUserTradeArchive captures enum value "archive"
	OrderStateInUserTradeArchive OrderStateInUserTrade = "archive"
)

// for schema
var orderStateInUserTradeEnum []interface{}

func init() {
	var res []OrderStateInUserTrade
	if err := json.Unmarshal([]byte(`["open","filled","rejected","cancelled","untriggered","archive"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		orderStateInUserTradeEnum = append(orderStateInUserTradeEnum, v)
	}
}

func (m OrderStateInUserTrade) validateOrderStateInUserTradeEnum(path, location string, value OrderStateInUserTrade) error {
	if err := validate.EnumCase(path, location, value, orderStateInUserTradeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this order state in user trade
func (m OrderStateInUserTrade) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateOrderStateInUserTradeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
