// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Withdrawal withdrawal
//
// swagger:model withdrawal
type Withdrawal struct {

	// address
	// Required: true
	Address CurrencyAddress `json:"address"`

	// amount
	// Required: true
	Amount CurrencyAmount `json:"amount"`

	// The timestamp (seconds since the Unix epoch, with millisecond precision) of withdrawal confirmation, `null` when not confirmed
	// Required: true
	ConfirmedTimestamp *int64 `json:"confirmed_timestamp"`

	// created timestamp
	CreatedTimestamp Timestamp `json:"created_timestamp,omitempty"`

	// currency
	// Required: true
	Currency Currency `json:"currency"`

	// fee
	Fee Fee `json:"fee,omitempty"`

	// Withdrawal id in Deribit system
	ID int64 `json:"id,omitempty"`

	// Id of priority level
	Priority float64 `json:"priority,omitempty"`

	// state
	// Required: true
	State WithdrawalState `json:"state"`

	// transaction id
	// Required: true
	TransactionID CurrencyTransactionID `json:"transaction_id"`

	// updated timestamp
	// Required: true
	UpdatedTimestamp Timestamp `json:"updated_timestamp"`
}

// Validate validates this withdrawal
func (m *Withdrawal) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfirmedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFee(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTransactionID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Withdrawal) validateAddress(formats strfmt.Registry) error {

	if err := m.Address.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("address")
		}
		return err
	}

	return nil
}

func (m *Withdrawal) validateAmount(formats strfmt.Registry) error {

	if err := m.Amount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("amount")
		}
		return err
	}

	return nil
}

func (m *Withdrawal) validateConfirmedTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("confirmed_timestamp", "body", m.ConfirmedTimestamp); err != nil {
		return err
	}

	return nil
}

func (m *Withdrawal) validateCreatedTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.CreatedTimestamp) { // not required
		return nil
	}

	if err := m.CreatedTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("created_timestamp")
		}
		return err
	}

	return nil
}

func (m *Withdrawal) validateCurrency(formats strfmt.Registry) error {

	if err := m.Currency.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("currency")
		}
		return err
	}

	return nil
}

func (m *Withdrawal) validateFee(formats strfmt.Registry) error {

	if swag.IsZero(m.Fee) { // not required
		return nil
	}

	if err := m.Fee.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("fee")
		}
		return err
	}

	return nil
}

func (m *Withdrawal) validateState(formats strfmt.Registry) error {

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

func (m *Withdrawal) validateTransactionID(formats strfmt.Registry) error {

	if err := m.TransactionID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("transaction_id")
		}
		return err
	}

	return nil
}

func (m *Withdrawal) validateUpdatedTimestamp(formats strfmt.Registry) error {

	if err := m.UpdatedTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("updated_timestamp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Withdrawal) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Withdrawal) UnmarshalBinary(b []byte) error {
	var res Withdrawal
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
