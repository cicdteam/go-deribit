// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// TransferState Transfer state, allowed values : `prepared`, `confirmed`, `cancelled`, `waiting_for_admin`, `rejection_reason`
//
// swagger:model transfer_state
type TransferState string

const (

	// TransferStatePrepared captures enum value "prepared"
	TransferStatePrepared TransferState = "prepared"

	// TransferStateConfirmed captures enum value "confirmed"
	TransferStateConfirmed TransferState = "confirmed"

	// TransferStateCancelled captures enum value "cancelled"
	TransferStateCancelled TransferState = "cancelled"

	// TransferStateWaitingForAdmin captures enum value "waiting_for_admin"
	TransferStateWaitingForAdmin TransferState = "waiting_for_admin"

	// TransferStateRejectionReason captures enum value "rejection_reason"
	TransferStateRejectionReason TransferState = "rejection_reason"
)

// for schema
var transferStateEnum []interface{}

func init() {
	var res []TransferState
	if err := json.Unmarshal([]byte(`["prepared","confirmed","cancelled","waiting_for_admin","rejection_reason"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		transferStateEnum = append(transferStateEnum, v)
	}
}

func (m TransferState) validateTransferStateEnum(path, location string, value TransferState) error {
	if err := validate.EnumCase(path, location, value, transferStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this transfer state
func (m TransferState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTransferStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
