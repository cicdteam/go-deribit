// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Trade trade
//
// swagger:model trade
type Trade struct {

	// user defined label
	// Required: true
	Label *string `json:"label"`

	// Matching order id
	// Required: true
	MatchingID *int64 `json:"matchingId"`

	// price
	// Required: true
	Price *float64 `json:"price"`

	// Trade quantity
	// Required: true
	Quantity *int64 `json:"quantity"`

	// true if the trade is against own order. This can only happen when your account has self-trading enabled. Contact an administrator if you think you need that.
	// Required: true
	SelfTrade *bool `json:"selfTrade"`

	// Trade sequence number for the instrument
	// Required: true
	TradeSeq *int64 `json:"tradeSeq"`
}

// Validate validates this trade
func (m *Trade) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMatchingID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSelfTrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTradeSeq(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Trade) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *Trade) validateMatchingID(formats strfmt.Registry) error {

	if err := validate.Required("matchingId", "body", m.MatchingID); err != nil {
		return err
	}

	return nil
}

func (m *Trade) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

func (m *Trade) validateQuantity(formats strfmt.Registry) error {

	if err := validate.Required("quantity", "body", m.Quantity); err != nil {
		return err
	}

	return nil
}

func (m *Trade) validateSelfTrade(formats strfmt.Registry) error {

	if err := validate.Required("selfTrade", "body", m.SelfTrade); err != nil {
		return err
	}

	return nil
}

func (m *Trade) validateTradeSeq(formats strfmt.Registry) error {

	if err := validate.Required("tradeSeq", "body", m.TradeSeq); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Trade) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Trade) UnmarshalBinary(b []byte) error {
	var res Trade
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
