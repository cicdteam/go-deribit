// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// BookEntry book entry
//
// swagger:model book_entry
type BookEntry struct {

	// amount
	// Required: true
	Amount Amount `json:"amount"`

	// cumulative amount
	// Required: true
	CumulativeAmount CumulativeAmount `json:"cumulative_amount"`

	// cumulative quantity
	// Required: true
	CumulativeQuantity CumulativeQuantity `json:"cumulative_quantity"`

	// price
	// Required: true
	Price Price `json:"price"`

	// quantity
	// Required: true
	Quantity Quantity `json:"quantity"`
}

// Validate validates this book entry
func (m *BookEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCumulativeAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCumulativeQuantity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuantity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *BookEntry) validateAmount(formats strfmt.Registry) error {

	if err := m.Amount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("amount")
		}
		return err
	}

	return nil
}

func (m *BookEntry) validateCumulativeAmount(formats strfmt.Registry) error {

	if err := m.CumulativeAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cumulative_amount")
		}
		return err
	}

	return nil
}

func (m *BookEntry) validateCumulativeQuantity(formats strfmt.Registry) error {

	if err := m.CumulativeQuantity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("cumulative_quantity")
		}
		return err
	}

	return nil
}

func (m *BookEntry) validatePrice(formats strfmt.Registry) error {

	if err := m.Price.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("price")
		}
		return err
	}

	return nil
}

func (m *BookEntry) validateQuantity(formats strfmt.Registry) error {

	if err := m.Quantity.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("quantity")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BookEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BookEntry) UnmarshalBinary(b []byte) error {
	var res BookEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
