// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Greeks Only for options
//
// swagger:model greeks
type Greeks struct {

	// (Only for option) The delta value for the option
	// Required: true
	Delta *float64 `json:"delta"`

	// (Only for option) The gamma value for the option
	// Required: true
	Gamma *float64 `json:"gamma"`

	// (Only for option) The rho value for the option
	// Required: true
	Rho *float64 `json:"rho"`

	// (Only for option) The theta value for the option
	// Required: true
	Theta *float64 `json:"theta"`

	// (Only for option) The vega value for the option
	// Required: true
	Vega *float64 `json:"vega"`
}

// Validate validates this greeks
func (m *Greeks) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDelta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGamma(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRho(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTheta(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVega(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Greeks) validateDelta(formats strfmt.Registry) error {

	if err := validate.Required("delta", "body", m.Delta); err != nil {
		return err
	}

	return nil
}

func (m *Greeks) validateGamma(formats strfmt.Registry) error {

	if err := validate.Required("gamma", "body", m.Gamma); err != nil {
		return err
	}

	return nil
}

func (m *Greeks) validateRho(formats strfmt.Registry) error {

	if err := validate.Required("rho", "body", m.Rho); err != nil {
		return err
	}

	return nil
}

func (m *Greeks) validateTheta(formats strfmt.Registry) error {

	if err := validate.Required("theta", "body", m.Theta); err != nil {
		return err
	}

	return nil
}

func (m *Greeks) validateVega(formats strfmt.Registry) error {

	if err := validate.Required("vega", "body", m.Vega); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Greeks) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Greeks) UnmarshalBinary(b []byte) error {
	var res Greeks
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
