// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SettlementResponse settlement response
//
// swagger:model settlement_response
type SettlementResponse struct {

	// result
	// Required: true
	Result *SettlementResponseResult `json:"result"`
}

// Validate validates this settlement response
func (m *SettlementResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SettlementResponse) validateResult(formats strfmt.Registry) error {

	if err := validate.Required("result", "body", m.Result); err != nil {
		return err
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *SettlementResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettlementResponse) UnmarshalBinary(b []byte) error {
	var res SettlementResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// SettlementResponseResult settlement response result
//
// swagger:model SettlementResponseResult
type SettlementResponseResult struct {

	// continuation
	// Required: true
	Continuation Continuation `json:"continuation"`

	// settlements
	// Required: true
	Settlements []*Settlement `json:"settlements"`
}

// Validate validates this settlement response result
func (m *SettlementResponseResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContinuation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSettlements(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *SettlementResponseResult) validateContinuation(formats strfmt.Registry) error {

	if err := m.Continuation.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("result" + "." + "continuation")
		}
		return err
	}

	return nil
}

func (m *SettlementResponseResult) validateSettlements(formats strfmt.Registry) error {

	if err := validate.Required("result"+"."+"settlements", "body", m.Settlements); err != nil {
		return err
	}

	for i := 0; i < len(m.Settlements); i++ {
		if swag.IsZero(m.Settlements[i]) { // not required
			continue
		}

		if m.Settlements[i] != nil {
			if err := m.Settlements[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("result" + "." + "settlements" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *SettlementResponseResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *SettlementResponseResult) UnmarshalBinary(b []byte) error {
	var res SettlementResponseResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
