// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// BaseMessage base message
//
// swagger:model base_message
type BaseMessage struct {

	// The id that was sent in the request
	ID int64 `json:"id,omitempty"`

	// The JSON-RPC version (2.0)
	// Required: true
	// Enum: [2.0]
	Jsonrpc *string `json:"jsonrpc"`

	// false for production server, true for test server
	// Required: true
	Testnet *bool `json:"testnet"`

	// Duration of the handling of the request, in microseconds
	// Required: true
	UsDiff *int64 `json:"usDiff"`

	// The timestamp (in microseconds) of receipt of the request
	// Required: true
	UsIn *int64 `json:"usIn"`

	// The timestamp (in microseconds) of sending of the response
	// Required: true
	UsOut *int64 `json:"usOut"`
}

// Validate validates this base message
func (m *BaseMessage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateJsonrpc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTestnet(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsDiff(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsOut(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var baseMessageTypeJsonrpcPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["2.0"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		baseMessageTypeJsonrpcPropEnum = append(baseMessageTypeJsonrpcPropEnum, v)
	}
}

const (

	// BaseMessageJsonrpcNr20 captures enum value "2.0"
	BaseMessageJsonrpcNr20 string = "2.0"
)

// prop value enum
func (m *BaseMessage) validateJsonrpcEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, baseMessageTypeJsonrpcPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *BaseMessage) validateJsonrpc(formats strfmt.Registry) error {

	if err := validate.Required("jsonrpc", "body", m.Jsonrpc); err != nil {
		return err
	}

	// value enum
	if err := m.validateJsonrpcEnum("jsonrpc", "body", *m.Jsonrpc); err != nil {
		return err
	}

	return nil
}

func (m *BaseMessage) validateTestnet(formats strfmt.Registry) error {

	if err := validate.Required("testnet", "body", m.Testnet); err != nil {
		return err
	}

	return nil
}

func (m *BaseMessage) validateUsDiff(formats strfmt.Registry) error {

	if err := validate.Required("usDiff", "body", m.UsDiff); err != nil {
		return err
	}

	return nil
}

func (m *BaseMessage) validateUsIn(formats strfmt.Registry) error {

	if err := validate.Required("usIn", "body", m.UsIn); err != nil {
		return err
	}

	return nil
}

func (m *BaseMessage) validateUsOut(formats strfmt.Registry) error {

	if err := validate.Required("usOut", "body", m.UsOut); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *BaseMessage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *BaseMessage) UnmarshalBinary(b []byte) error {
	var res BaseMessage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
