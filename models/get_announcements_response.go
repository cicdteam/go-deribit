// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// GetAnnouncementsResponse get announcements response
//
// swagger:model get_announcements_response
type GetAnnouncementsResponse struct {

	// result
	// Required: true
	Result []*GetAnnouncementsResponseResultItems0 `json:"result"`
}

// Validate validates this get announcements response
func (m *GetAnnouncementsResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetAnnouncementsResponse) validateResult(formats strfmt.Registry) error {

	if err := validate.Required("result", "body", m.Result); err != nil {
		return err
	}

	for i := 0; i < len(m.Result); i++ {
		if swag.IsZero(m.Result[i]) { // not required
			continue
		}

		if m.Result[i] != nil {
			if err := m.Result[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("result" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetAnnouncementsResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetAnnouncementsResponse) UnmarshalBinary(b []byte) error {
	var res GetAnnouncementsResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// GetAnnouncementsResponseResultItems0 get announcements response result items0
//
// swagger:model GetAnnouncementsResponseResultItems0
type GetAnnouncementsResponseResultItems0 struct {

	// The HTML body of the announcement
	// Required: true
	Body *string `json:"body"`

	// A unique identifier for the announcement
	// Required: true
	ID *float64 `json:"id"`

	// Whether the announcement is marked as important
	// Required: true
	Important *bool `json:"important"`

	// The timestamp in ms at which the announcement was published
	// Required: true
	PublicationTime *int64 `json:"publication_time"`

	// The title of the announcement
	// Required: true
	Title *string `json:"title"`
}

// Validate validates this get announcements response result items0
func (m *GetAnnouncementsResponseResultItems0) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImportant(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePublicationTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *GetAnnouncementsResponseResultItems0) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	return nil
}

func (m *GetAnnouncementsResponseResultItems0) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *GetAnnouncementsResponseResultItems0) validateImportant(formats strfmt.Registry) error {

	if err := validate.Required("important", "body", m.Important); err != nil {
		return err
	}

	return nil
}

func (m *GetAnnouncementsResponseResultItems0) validatePublicationTime(formats strfmt.Registry) error {

	if err := validate.Required("publication_time", "body", m.PublicationTime); err != nil {
		return err
	}

	return nil
}

func (m *GetAnnouncementsResponseResultItems0) validateTitle(formats strfmt.Registry) error {

	if err := validate.Required("title", "body", m.Title); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *GetAnnouncementsResponseResultItems0) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GetAnnouncementsResponseResultItems0) UnmarshalBinary(b []byte) error {
	var res GetAnnouncementsResponseResultItems0
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
