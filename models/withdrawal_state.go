// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// WithdrawalState Withdrawal state, allowed values : `unconfirmed`, `confirmed`, `cancelled`, `completed`, `interrupted`, `rejected`
//
// swagger:model withdrawal_state
type WithdrawalState string

const (

	// WithdrawalStateUnconfirmed captures enum value "unconfirmed"
	WithdrawalStateUnconfirmed WithdrawalState = "unconfirmed"

	// WithdrawalStateConfirmed captures enum value "confirmed"
	WithdrawalStateConfirmed WithdrawalState = "confirmed"

	// WithdrawalStateCancelled captures enum value "cancelled"
	WithdrawalStateCancelled WithdrawalState = "cancelled"

	// WithdrawalStateCompleted captures enum value "completed"
	WithdrawalStateCompleted WithdrawalState = "completed"

	// WithdrawalStateInterrupted captures enum value "interrupted"
	WithdrawalStateInterrupted WithdrawalState = "interrupted"

	// WithdrawalStateRejected captures enum value "rejected"
	WithdrawalStateRejected WithdrawalState = "rejected"
)

// for schema
var withdrawalStateEnum []interface{}

func init() {
	var res []WithdrawalState
	if err := json.Unmarshal([]byte(`["unconfirmed","confirmed","cancelled","completed","interrupted","rejected"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		withdrawalStateEnum = append(withdrawalStateEnum, v)
	}
}

func (m WithdrawalState) validateWithdrawalStateEnum(path, location string, value WithdrawalState) error {
	if err := validate.EnumCase(path, location, value, withdrawalStateEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this withdrawal state
func (m WithdrawalState) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateWithdrawalStateEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
