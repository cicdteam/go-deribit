// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Portfolio portfolio
//
// swagger:model portfolio
type Portfolio struct {

	// btc
	// Required: true
	Btc *CurrencyPortfolio `json:"btc"`

	// eth
	// Required: true
	Eth *CurrencyPortfolio `json:"eth"`
}

// Validate validates this portfolio
func (m *Portfolio) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBtc(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEth(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Portfolio) validateBtc(formats strfmt.Registry) error {

	if err := validate.Required("btc", "body", m.Btc); err != nil {
		return err
	}

	if m.Btc != nil {
		if err := m.Btc.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("btc")
			}
			return err
		}
	}

	return nil
}

func (m *Portfolio) validateEth(formats strfmt.Registry) error {

	if err := validate.Required("eth", "body", m.Eth); err != nil {
		return err
	}

	if m.Eth != nil {
		if err := m.Eth.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("eth")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Portfolio) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Portfolio) UnmarshalBinary(b []byte) error {
	var res Portfolio
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
