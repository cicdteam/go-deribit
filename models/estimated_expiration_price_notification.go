// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// EstimatedExpirationPriceNotification estimated expiration price notification
//
// swagger:model estimated_expiration_price_notification
type EstimatedExpirationPriceNotification struct {

	// When `true` then prize is given as an estimated value, otherwise it's current index price
	// Required: true
	IsEstimated *bool `json:"is_estimated"`

	// Index current or estimated price
	// Required: true
	Price *float64 `json:"price"`

	// Number of seconds till finalizing the nearest instrument
	// Required: true
	Seconds *int64 `json:"seconds"`
}

// Validate validates this estimated expiration price notification
func (m *EstimatedExpirationPriceNotification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateIsEstimated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeconds(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *EstimatedExpirationPriceNotification) validateIsEstimated(formats strfmt.Registry) error {

	if err := validate.Required("is_estimated", "body", m.IsEstimated); err != nil {
		return err
	}

	return nil
}

func (m *EstimatedExpirationPriceNotification) validatePrice(formats strfmt.Registry) error {

	if err := validate.Required("price", "body", m.Price); err != nil {
		return err
	}

	return nil
}

func (m *EstimatedExpirationPriceNotification) validateSeconds(formats strfmt.Registry) error {

	if err := validate.Required("seconds", "body", m.Seconds); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *EstimatedExpirationPriceNotification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *EstimatedExpirationPriceNotification) UnmarshalBinary(b []byte) error {
	var res EstimatedExpirationPriceNotification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
