// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PrivateDepositAddressResponse private deposit address response
//
// swagger:model private_deposit_address_response
type PrivateDepositAddressResponse struct {

	// result
	// Required: true
	Result *PrivateDepositAddressResponseResult `json:"result"`
}

// Validate validates this private deposit address response
func (m *PrivateDepositAddressResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateDepositAddressResponse) validateResult(formats strfmt.Registry) error {

	if err := validate.Required("result", "body", m.Result); err != nil {
		return err
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateDepositAddressResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateDepositAddressResponse) UnmarshalBinary(b []byte) error {
	var res PrivateDepositAddressResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PrivateDepositAddressResponseResult Object if address is created, null otherwise
//
// swagger:model PrivateDepositAddressResponseResult
type PrivateDepositAddressResponseResult struct {

	// address
	// Required: true
	Address CurrencyAddress `json:"address"`

	// creation timestamp
	// Required: true
	CreationTimestamp Timestamp `json:"creation_timestamp"`

	// currency
	// Required: true
	Currency Currency `json:"currency"`

	// type
	// Required: true
	Type WalletAddressType `json:"type"`
}

// Validate validates this private deposit address response result
func (m *PrivateDepositAddressResponseResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreationTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PrivateDepositAddressResponseResult) validateAddress(formats strfmt.Registry) error {

	if err := m.Address.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("result" + "." + "address")
		}
		return err
	}

	return nil
}

func (m *PrivateDepositAddressResponseResult) validateCreationTimestamp(formats strfmt.Registry) error {

	if err := m.CreationTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("result" + "." + "creation_timestamp")
		}
		return err
	}

	return nil
}

func (m *PrivateDepositAddressResponseResult) validateCurrency(formats strfmt.Registry) error {

	if err := m.Currency.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("result" + "." + "currency")
		}
		return err
	}

	return nil
}

func (m *PrivateDepositAddressResponseResult) validateType(formats strfmt.Registry) error {

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("result" + "." + "type")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PrivateDepositAddressResponseResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PrivateDepositAddressResponseResult) UnmarshalBinary(b []byte) error {
	var res PrivateDepositAddressResponseResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
