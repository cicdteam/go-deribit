// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// CurrencyPair Currency pair: `"btc_usd"` or `"eth_usd"`
//
// swagger:model currency_pair
type CurrencyPair string

const (

	// CurrencyPairBtcUsd captures enum value "btc_usd"
	CurrencyPairBtcUsd CurrencyPair = "btc_usd"

	// CurrencyPairEthUsd captures enum value "eth_usd"
	CurrencyPairEthUsd CurrencyPair = "eth_usd"
)

// for schema
var currencyPairEnum []interface{}

func init() {
	var res []CurrencyPair
	if err := json.Unmarshal([]byte(`["btc_usd","eth_usd"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		currencyPairEnum = append(currencyPairEnum, v)
	}
}

func (m CurrencyPair) validateCurrencyPairEnum(path, location string, value CurrencyPair) error {
	if err := validate.EnumCase(path, location, value, currencyPairEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this currency pair
func (m CurrencyPair) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateCurrencyPairEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
