// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// TransferItem transfer item
//
// swagger:model transfer_item
type TransferItem struct {

	// amount
	// Required: true
	Amount CurrencyAmount `json:"amount"`

	// created timestamp
	// Required: true
	CreatedTimestamp Timestamp `json:"created_timestamp"`

	// currency
	// Required: true
	Currency Currency `json:"currency"`

	// direction
	Direction TransferDirection `json:"direction,omitempty"`

	// id
	// Required: true
	ID TransferID `json:"id"`

	// other side
	// Required: true
	OtherSide TransferOtherSide `json:"other_side"`

	// state
	// Required: true
	State TransferState `json:"state"`

	// type
	// Required: true
	Type TransferType `json:"type"`

	// updated timestamp
	// Required: true
	UpdatedTimestamp Timestamp `json:"updated_timestamp"`
}

// Validate validates this transfer item
func (m *TransferItem) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrency(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOtherSide(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TransferItem) validateAmount(formats strfmt.Registry) error {

	if err := m.Amount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("amount")
		}
		return err
	}

	return nil
}

func (m *TransferItem) validateCreatedTimestamp(formats strfmt.Registry) error {

	if err := m.CreatedTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("created_timestamp")
		}
		return err
	}

	return nil
}

func (m *TransferItem) validateCurrency(formats strfmt.Registry) error {

	if err := m.Currency.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("currency")
		}
		return err
	}

	return nil
}

func (m *TransferItem) validateDirection(formats strfmt.Registry) error {

	if swag.IsZero(m.Direction) { // not required
		return nil
	}

	if err := m.Direction.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("direction")
		}
		return err
	}

	return nil
}

func (m *TransferItem) validateID(formats strfmt.Registry) error {

	if err := m.ID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("id")
		}
		return err
	}

	return nil
}

func (m *TransferItem) validateOtherSide(formats strfmt.Registry) error {

	if err := m.OtherSide.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("other_side")
		}
		return err
	}

	return nil
}

func (m *TransferItem) validateState(formats strfmt.Registry) error {

	if err := m.State.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("state")
		}
		return err
	}

	return nil
}

func (m *TransferItem) validateType(formats strfmt.Registry) error {

	if err := m.Type.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("type")
		}
		return err
	}

	return nil
}

func (m *TransferItem) validateUpdatedTimestamp(formats strfmt.Registry) error {

	if err := m.UpdatedTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("updated_timestamp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *TransferItem) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TransferItem) UnmarshalBinary(b []byte) error {
	var res TransferItem
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
