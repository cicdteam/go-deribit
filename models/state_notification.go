// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StateNotification state notification
//
// swagger:model state_notification
type StateNotification struct {

	// instrument name
	InstrumentName InstrumentName `json:"instrument_name,omitempty"`

	// State of instrument
	// Enum: [closed created terminated]
	State string `json:"state,omitempty"`

	// timestamp
	Timestamp Timestamp `json:"timestamp,omitempty"`
}

// Validate validates this state notification
func (m *StateNotification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateInstrumentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StateNotification) validateInstrumentName(formats strfmt.Registry) error {

	if swag.IsZero(m.InstrumentName) { // not required
		return nil
	}

	if err := m.InstrumentName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("instrument_name")
		}
		return err
	}

	return nil
}

var stateNotificationTypeStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["closed","created","terminated"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		stateNotificationTypeStatePropEnum = append(stateNotificationTypeStatePropEnum, v)
	}
}

const (

	// StateNotificationStateClosed captures enum value "closed"
	StateNotificationStateClosed string = "closed"

	// StateNotificationStateCreated captures enum value "created"
	StateNotificationStateCreated string = "created"

	// StateNotificationStateTerminated captures enum value "terminated"
	StateNotificationStateTerminated string = "terminated"
)

// prop value enum
func (m *StateNotification) validateStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, stateNotificationTypeStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *StateNotification) validateState(formats strfmt.Registry) error {

	if swag.IsZero(m.State) { // not required
		return nil
	}

	// value enum
	if err := m.validateStateEnum("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *StateNotification) validateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.Timestamp) { // not required
		return nil
	}

	if err := m.Timestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timestamp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StateNotification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StateNotification) UnmarshalBinary(b []byte) error {
	var res StateNotification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
