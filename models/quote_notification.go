// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// QuoteNotification quote notification
//
// swagger:model quote_notification
type QuoteNotification struct {

	// best ask amount
	// Required: true
	BestAskAmount BestAskAmount `json:"best_ask_amount"`

	// best ask price
	// Required: true
	BestAskPrice BestAskPrice `json:"best_ask_price"`

	// best bid amount
	// Required: true
	BestBidAmount BestBidAmount `json:"best_bid_amount"`

	// best bid price
	// Required: true
	BestBidPrice BestBidPrice `json:"best_bid_price"`

	// instrument name
	// Required: true
	InstrumentName InstrumentName `json:"instrument_name"`

	// timestamp
	// Required: true
	Timestamp Timestamp `json:"timestamp"`
}

// Validate validates this quote notification
func (m *QuoteNotification) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBestAskAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBestAskPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBestBidAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBestBidPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstrumentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *QuoteNotification) validateBestAskAmount(formats strfmt.Registry) error {

	if err := m.BestAskAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("best_ask_amount")
		}
		return err
	}

	return nil
}

func (m *QuoteNotification) validateBestAskPrice(formats strfmt.Registry) error {

	if err := m.BestAskPrice.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("best_ask_price")
		}
		return err
	}

	return nil
}

func (m *QuoteNotification) validateBestBidAmount(formats strfmt.Registry) error {

	if err := m.BestBidAmount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("best_bid_amount")
		}
		return err
	}

	return nil
}

func (m *QuoteNotification) validateBestBidPrice(formats strfmt.Registry) error {

	if err := m.BestBidPrice.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("best_bid_price")
		}
		return err
	}

	return nil
}

func (m *QuoteNotification) validateInstrumentName(formats strfmt.Registry) error {

	if err := m.InstrumentName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("instrument_name")
		}
		return err
	}

	return nil
}

func (m *QuoteNotification) validateTimestamp(formats strfmt.Registry) error {

	if err := m.Timestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timestamp")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *QuoteNotification) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *QuoteNotification) UnmarshalBinary(b []byte) error {
	var res QuoteNotification
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
