// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// StopOrderHistoryRecord stop order history record
//
// swagger:model stop_order_history_record
type StopOrderHistoryRecord struct {

	// amount
	// Required: true
	Amount Amount `json:"amount"`

	// direction
	// Required: true
	Direction Direction `json:"direction"`

	// instrument name
	// Required: true
	InstrumentName InstrumentName `json:"instrument_name"`

	// last update timestamp
	LastUpdateTimestamp Timestamp `json:"last_update_timestamp,omitempty"`

	// order id
	// Required: true
	OrderID OrderID `json:"order_id"`

	// order state
	// Required: true
	OrderState OrderState `json:"order_state"`

	// price
	// Required: true
	Price Price `json:"price"`

	// user or system request type for the stop order. "add" - to add order, "cancel" - to cancel, "edit" - to change order, "trigger:stop" - to trigger stop order, "trigger:order" - to spawn limit or market order as the result of the triggering "trigger:stop"
	// Required: true
	Request *string `json:"request"`

	// Id of the user stop-order used for the stop-order reference before triggering
	// Required: true
	StopID *string `json:"stop_id"`

	// stop price
	// Required: true
	StopPrice StopPrice `json:"stop_price"`

	// timestamp
	// Required: true
	Timestamp Timestamp `json:"timestamp"`

	// trigger
	// Required: true
	Trigger Trigger `json:"trigger"`
}

// Validate validates this stop order history record
func (m *StopOrderHistoryRecord) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDirection(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstrumentName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastUpdateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrderState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRequest(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStopPrice(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTrigger(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *StopOrderHistoryRecord) validateAmount(formats strfmt.Registry) error {

	if err := m.Amount.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("amount")
		}
		return err
	}

	return nil
}

func (m *StopOrderHistoryRecord) validateDirection(formats strfmt.Registry) error {

	if err := m.Direction.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("direction")
		}
		return err
	}

	return nil
}

func (m *StopOrderHistoryRecord) validateInstrumentName(formats strfmt.Registry) error {

	if err := m.InstrumentName.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("instrument_name")
		}
		return err
	}

	return nil
}

func (m *StopOrderHistoryRecord) validateLastUpdateTimestamp(formats strfmt.Registry) error {

	if swag.IsZero(m.LastUpdateTimestamp) { // not required
		return nil
	}

	if err := m.LastUpdateTimestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("last_update_timestamp")
		}
		return err
	}

	return nil
}

func (m *StopOrderHistoryRecord) validateOrderID(formats strfmt.Registry) error {

	if err := m.OrderID.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("order_id")
		}
		return err
	}

	return nil
}

func (m *StopOrderHistoryRecord) validateOrderState(formats strfmt.Registry) error {

	if err := m.OrderState.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("order_state")
		}
		return err
	}

	return nil
}

func (m *StopOrderHistoryRecord) validatePrice(formats strfmt.Registry) error {

	if err := m.Price.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("price")
		}
		return err
	}

	return nil
}

func (m *StopOrderHistoryRecord) validateRequest(formats strfmt.Registry) error {

	if err := validate.Required("request", "body", m.Request); err != nil {
		return err
	}

	return nil
}

func (m *StopOrderHistoryRecord) validateStopID(formats strfmt.Registry) error {

	if err := validate.Required("stop_id", "body", m.StopID); err != nil {
		return err
	}

	return nil
}

func (m *StopOrderHistoryRecord) validateStopPrice(formats strfmt.Registry) error {

	if err := m.StopPrice.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("stop_price")
		}
		return err
	}

	return nil
}

func (m *StopOrderHistoryRecord) validateTimestamp(formats strfmt.Registry) error {

	if err := m.Timestamp.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("timestamp")
		}
		return err
	}

	return nil
}

func (m *StopOrderHistoryRecord) validateTrigger(formats strfmt.Registry) error {

	if err := m.Trigger.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("trigger")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *StopOrderHistoryRecord) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *StopOrderHistoryRecord) UnmarshalBinary(b []byte) error {
	var res StopOrderHistoryRecord
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
