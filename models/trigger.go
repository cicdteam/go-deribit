// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// Trigger Trigger type (Only for stop orders). Allowed values: `"index_price"`, `"mark_price"`, `"last_price"`.
//
// swagger:model trigger
type Trigger string

const (

	// TriggerIndexPrice captures enum value "index_price"
	TriggerIndexPrice Trigger = "index_price"

	// TriggerMarkPrice captures enum value "mark_price"
	TriggerMarkPrice Trigger = "mark_price"

	// TriggerLastPrice captures enum value "last_price"
	TriggerLastPrice Trigger = "last_price"
)

// for schema
var triggerEnum []interface{}

func init() {
	var res []Trigger
	if err := json.Unmarshal([]byte(`["index_price","mark_price","last_price"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		triggerEnum = append(triggerEnum, v)
	}
}

func (m Trigger) validateTriggerEnum(path, location string, value Trigger) error {
	if err := validate.EnumCase(path, location, value, triggerEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this trigger
func (m Trigger) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateTriggerEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
