// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// KindWithAny Instrument kind, `"future"` or `"option"` or `"any"` if don't care
//
// swagger:model kind_with_any
type KindWithAny string

const (

	// KindWithAnyFuture captures enum value "future"
	KindWithAnyFuture KindWithAny = "future"

	// KindWithAnyOption captures enum value "option"
	KindWithAnyOption KindWithAny = "option"

	// KindWithAnyAny captures enum value "any"
	KindWithAnyAny KindWithAny = "any"
)

// for schema
var kindWithAnyEnum []interface{}

func init() {
	var res []KindWithAny
	if err := json.Unmarshal([]byte(`["future","option","any"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		kindWithAnyEnum = append(kindWithAnyEnum, v)
	}
}

func (m KindWithAny) validateKindWithAnyEnum(path, location string, value KindWithAny) error {
	if err := validate.EnumCase(path, location, value, kindWithAnyEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this kind with any
func (m KindWithAny) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateKindWithAnyEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
