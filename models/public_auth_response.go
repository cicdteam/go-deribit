// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PublicAuthResponse public auth response
//
// swagger:model public_auth_response
type PublicAuthResponse struct {

	// result
	// Required: true
	Result *PublicAuthResponseResult `json:"result"`
}

// Validate validates this public auth response
func (m *PublicAuthResponse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResult(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicAuthResponse) validateResult(formats strfmt.Registry) error {

	if err := validate.Required("result", "body", m.Result); err != nil {
		return err
	}

	if m.Result != nil {
		if err := m.Result.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("result")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublicAuthResponse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicAuthResponse) UnmarshalBinary(b []byte) error {
	var res PublicAuthResponse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// PublicAuthResponseResult public auth response result
//
// swagger:model PublicAuthResponseResult
type PublicAuthResponseResult struct {

	// access token
	// Required: true
	AccessToken *string `json:"access_token"`

	// Token lifetime in seconds
	// Required: true
	ExpiresIn *int64 `json:"expires_in"`

	// Can be used to request a new token (with a new lifetime)
	// Required: true
	RefreshToken *string `json:"refresh_token"`

	// Type of the access for assigned token
	// Required: true
	Scope *string `json:"scope"`

	// Copied from the input (if applicable)
	State string `json:"state,omitempty"`

	// Authorization type, allowed value - `bearer`
	// Required: true
	// Enum: [bearer]
	TokenType *string `json:"token_type"`
}

// Validate validates this public auth response result
func (m *PublicAuthResponseResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccessToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiresIn(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRefreshToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateScope(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTokenType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PublicAuthResponseResult) validateAccessToken(formats strfmt.Registry) error {

	if err := validate.Required("result"+"."+"access_token", "body", m.AccessToken); err != nil {
		return err
	}

	return nil
}

func (m *PublicAuthResponseResult) validateExpiresIn(formats strfmt.Registry) error {

	if err := validate.Required("result"+"."+"expires_in", "body", m.ExpiresIn); err != nil {
		return err
	}

	return nil
}

func (m *PublicAuthResponseResult) validateRefreshToken(formats strfmt.Registry) error {

	if err := validate.Required("result"+"."+"refresh_token", "body", m.RefreshToken); err != nil {
		return err
	}

	return nil
}

func (m *PublicAuthResponseResult) validateScope(formats strfmt.Registry) error {

	if err := validate.Required("result"+"."+"scope", "body", m.Scope); err != nil {
		return err
	}

	return nil
}

var publicAuthResponseResultTypeTokenTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["bearer"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		publicAuthResponseResultTypeTokenTypePropEnum = append(publicAuthResponseResultTypeTokenTypePropEnum, v)
	}
}

const (

	// PublicAuthResponseResultTokenTypeBearer captures enum value "bearer"
	PublicAuthResponseResultTokenTypeBearer string = "bearer"
)

// prop value enum
func (m *PublicAuthResponseResult) validateTokenTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, publicAuthResponseResultTypeTokenTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *PublicAuthResponseResult) validateTokenType(formats strfmt.Registry) error {

	if err := validate.Required("result"+"."+"token_type", "body", m.TokenType); err != nil {
		return err
	}

	// value enum
	if err := m.validateTokenTypeEnum("result"+"."+"token_type", "body", *m.TokenType); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PublicAuthResponseResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PublicAuthResponseResult) UnmarshalBinary(b []byte) error {
	var res PublicAuthResponseResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
