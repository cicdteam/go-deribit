// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// SettlementType The type of settlement. `settlement`, `delivery` or `bankruptcy`.
//
// swagger:model settlement_type
type SettlementType string

const (

	// SettlementTypeSettlement captures enum value "settlement"
	SettlementTypeSettlement SettlementType = "settlement"

	// SettlementTypeDelivery captures enum value "delivery"
	SettlementTypeDelivery SettlementType = "delivery"

	// SettlementTypeBankruptcy captures enum value "bankruptcy"
	SettlementTypeBankruptcy SettlementType = "bankruptcy"
)

// for schema
var settlementTypeEnum []interface{}

func init() {
	var res []SettlementType
	if err := json.Unmarshal([]byte(`["settlement","delivery","bankruptcy"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		settlementTypeEnum = append(settlementTypeEnum, v)
	}
}

func (m SettlementType) validateSettlementTypeEnum(path, location string, value SettlementType) error {
	if err := validate.EnumCase(path, location, value, settlementTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this settlement type
func (m SettlementType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateSettlementTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
